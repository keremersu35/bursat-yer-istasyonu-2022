<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MindFusion.Charting</name>
    </assembly>
    <members>
        <member name="T:MindFusion.Charting.RotationController">
            <summary>
            Represents a controller that rotates a polar plot by changing its StartAngle.
            </summary>
            <summary>
            Represents a controller that rotates a polar plot by changing its StartAngle.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.PlotController">
            <summary>
            A base class for controllers implementing user interaction with Plot components.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.ComponentController">
            <summary>
            Defines the interface that controller classes should implement
            to get user input from the Dashboard control.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.ComponentController.OnMouseDown(System.Double,System.Double)">
            <summary>
            Called when the user presses a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.ComponentController.OnMouseMove(System.Double,System.Double)">
            <summary>
            Called when the user moves the mouse.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.ComponentController.OnMouseUp(System.Double,System.Double)">
            <summary>
            Called when the user releases a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.ComponentController.DrawInteraction(MindFusion.Drawing.IGraphics)">
            <summary>
            Draws a representation of the current state of user interaction on specified IGraphics surface.
            </summary>
            <param name="graphics">An IGraphics instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.ComponentController.GetCursorHint(System.Double,System.Double)">
            <summary>
            Invoked while the mouse is moved to let your application set the mouse cursor.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
            <return>
            A member of the CursorHint enumeration.
            </return>
        </member>
        <member name="M:MindFusion.Charting.Components.ComponentController.GetRunningAnimation">
            <summary>
            For internal use.
            </summary>
            <returns>An instance of a ComponentAnimation -derived class.</returns>
        </member>
        <member name="P:MindFusion.Charting.Components.ComponentController.Component">
            <summary>
            Gets the component modified by this ComponentController.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PlotController.#ctor(MindFusion.Charting.RenderContext)">
            <summary>
            Initializes a new instance of the PlotController class.
            </summary>
            <param name="renderContext">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.PlotController.OnMouseDown(System.Double,System.Double)">
            <summary>
            Implements ComponentController.OnMouseDown. Called when the user presses a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.PlotController.OnMouseMove(System.Double,System.Double)">
            <summary>
            Implements ComponentController.OnMouseMove. Called when the user moves the mouse.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.PlotController.OnMouseUp(System.Double,System.Double)">
            <summary>
            Implements ComponentController.OnMouseUp. Called when the user releases a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.PlotController.DrawInteraction(MindFusion.Drawing.IGraphics)">
            <summary>
            Implements ComponentController.DrawInteraction. Draws a representation
            of the current state of user interaction on specified IGraphics surface.
            </summary>
            <param name="graphics">An IGraphics instance.</param>
        </member>
        <member name="M:MindFusion.Charting.PlotController.GetRunningAnimation">
            <summary>
            For internal use.
            </summary>
            <returns>An instance of a ComponentAnimation -derived class.</returns>
        </member>
        <member name="M:MindFusion.Charting.PlotController.GetCursorHint(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <returns>A member of the CursorHint enumeration.</returns>
        </member>
        <member name="F:MindFusion.Charting.PlotController.renderContext">
            <summary>
            The current RenderContext.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PlotController.Component">
            <summary>
            Gets the component controlled by this PlotController.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.RotationController.#ctor(MindFusion.Charting.RenderContext)">
            <summary>
            Initializes a new instance of the RotationController class.
            </summary>
            <param name="renderContext">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.RotationController.OnMouseDown(System.Double,System.Double)">
            <summary>
            PlotController.OnMouseDown override. Called when the user presses a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.RotationController.OnMouseMove(System.Double,System.Double)">
            <summary>
            PlotController.OnMouseMove override. Called when the user moves the mouse.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.RotationController.OnMouseUp(System.Double,System.Double)">
            <summary>
            PlotController.OnMouseUp override. Called when the user releases a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.RotationController.GetRunningAnimation">
            <summary>
            For internal use.
            </summary>
            <returns>An instance of a ComponentAnimation -derived class.</returns>
        </member>
        <member name="P:MindFusion.Charting.RotationController.EnableAnimation">
            <summary>
            Gets or sets whether to enable rotation inertia.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.ComponentAnimation">
            <summary>
            Represents an animation.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.ComponentAnimation.Stop">
            <summary>
            Stops this animation.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.DateTimeFormat">
            <summary>
            Specifies formats for DateTime values
            </summary>
        </member>
        <member name="F:MindFusion.Charting.DateTimeFormat.CustomDateTime">
            <summary>
            Indicates that the number should be formatted as a
            DateTime value according to a custom set string.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.DateTimeFormat.FullDateTime">
            <summary>
            Indicates that the number should be formatted as a
            DateTime value with a full date pattern.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.DateTimeFormat.LongDate">
            <summary>
            Indicates that the number should be formatted as a
            DateTime value with a long date pattern.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.DateTimeFormat.LongTime">
            <summary>
            Indicates that the number should be formatted as a
            DateTime value with a long time pattern.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.DateTimeFormat.MonthDateTime">
            <summary>
            Indicates that the number should be formatted as a
            DateTime value with a month day pattern.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.DateTimeFormat.None">
            <summary>
            The DateTime value is not formatted
            </summary>
        </member>
        <member name="F:MindFusion.Charting.DateTimeFormat.ShortDate">
            <summary>
            Indicates that the number should be formatted as a
            DateTime value with a short date pattern.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.DateTimeFormat.ShortTime">
            <summary>
            Indicates that the number should be formatted as a
            DateTime value with a short time pattern.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.DateTimeFormat.YearDateTime">
            <summary>
            Indicates that the number should be formatted as a
            DateTime value with a year month date pattern.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.RangeSelector">
            <summary>
            Represents a control that handles zooming and scrolling of axes. 
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.Component">
            <summary>
            Represents a user interface component.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.#ctor">
            <summary>
            Initializes a new instance of the Component class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Measures the desired size of this component.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.Arrange(System.Double,System.Double,System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Sets the location and size of this component relatively to its parent.
            </summary>
            <param name="x">A double value specifying horizontal position.</param>
            <param name="y">A double value specifying vertical position.</param>
            <param name="w">A double value specifying the component's width.</param>
            <param name="h">A double value specifying the component's height.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Draws this component in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.ArrangeInRect(MindFusion.Charting.Components.Component,MindFusion.Charting.RenderContext,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Arranges a child component in specified layout rectangle.
            </summary>
            <param name="child">A Component instance specifying the child to arrange.</param>
            <param name="context">A RenderContext instance.</param>
            <param name="x">Layout rectangle's horizontal position.</param>
            <param name="y">Layout rectangle's vertical position.</param>
            <param name="w">Layout rectangle's width.</param>
            <param name="h">Layout rectangle's height.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.CreateController(MindFusion.Charting.RenderContext)">
            <summary>
            Returns a ComponentController used to interact with this component.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>Instance of a ComponentController -derived class.</returns>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.GetCursorHint(System.Double,System.Double)">
            <summary>
            Invoked while the mouse is moved to let your application set the mouse cursor.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
            <return>
            A member of the CursorHint enumeration.
            </return>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.Add(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Sums specified nullable double values.
            </summary>
            <param name="value1">The first term to sum.</param>
            <param name="value2">The second term to sum.</param>
            <returns>A nullable double value representing the sum.</returns>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.Max(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Returns the larger of specified values.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>A nullable double value representing the larger value.</returns>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.Visit(MindFusion.Charting.Components.ComponentVisitor)">
            <summary>
            Implements the visitor design pattern.
            </summary>
            <param name="visitor">An instance of a ComponentVisitor -derived class.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.HitTest(System.Double,System.Double)">
            <summary>
            Returns the component containing specified point.
            </summary>
            <param name="x">X coordinate of the point to test.</param>
            <param name="y">Y coordinate of the point to test.</param>
            <returns>A Component instance if one contains the point, or null otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.LocalToRoot(MindFusion.PointD)">
            <summary>
            Transforms the specified point to the coordinate system of the root panel.
            </summary>
            <param name="point">A PointD instance containing coordinates local to this component.</param>
            <returns>A PointD instance containing coordinates relative to the root panel.</returns>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.RootToLocal(MindFusion.PointD)">
            <summary>
            Transforms the specified point to the coordinate system of this component.
            </summary>
            <param name="point">A PointD instance containing coordinates relative to the root panel.</param>
            <returns>A PointD instance containing coordinates local to this component.</returns>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.InvalidateLayout">
            <summary>
            Invalidates the current layout and runs a new layout pass before next draw operation.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.Invalidate">
            <summary>
            Invalidates the appearance of this component and calls its Draw method at next draw operation.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.Component.Invalidate(MindFusion.Charting.RectD)">
            <summary>
            Invalidates the appearance of this component and calls its Draw method at next draw operation.
            </summary>
            <param name="rect">A RectD instance specifying the invalid rectangle.</param>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.DesiredWidth">
            <summary>
            A nullable double value specifying the component's desired width. Valid only after calling Measure.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.DesiredHeight">
            <summary>
            A nullable double value specifying the component's desired height. Valid only after calling Measure.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.ActualWidth">
            <summary>
            A double value specifying the component's assigned width. Valid only after calling Arrange.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.ActualHeight">
            <summary>
            A double value specifying the component's assigned height. Valid only after calling Arrange.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.XInParent">
            <summary>
            A double value specifying the component's horizontal position relative to its parent.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.YInParent">
            <summary>
            A double value specifying the component's vertical position relative to its parent.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.RectInParent">
            <summary>
            Gets the boundaries of this component relative to its parent.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.GridRow">
            <summary>
            Gets or sets the row index of this component when placed inside a GridPanel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.GridColumn">
            <summary>
            Gets or sets the column index of this component when placed inside a GridPanel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of this component inside the
            layout rectangle allocated by its parent panel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of this component inside the
            layout rectangle allocated by its parent panel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.Margin">
            <summary>
            Gets or sets the margin space around this component relative to the
            layout rectangle allocated by its parent panel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.Visibility">
            <summary>
            Gets or sets the visibility of this component.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.HitTestVisibility">
            <summary>
            Gets or sets the hit-test visibility of this component.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.ToolTip">
            <summary>
            Gets or sets the component's tooltip text.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.Width">
            <summary>
            Gets or sets a fixed width for this component.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Component.Height">
            <summary>
            Gets or sets a fixed height for this component.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.RangeSelector.#ctor(MindFusion.Charting.Axis,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the RangeSelector class.
            </summary>
            <param name="axis">The Axis that will be handled by this object.</param>
            <param name="minValue">The smallest value of the displayed range.</param>
            <param name="maxValue">The largest value of the displayed range.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.RangeSelector.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Measure override. Measures the desired size of this component.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.RangeSelector.Arrange(System.Double,System.Double,System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Arrange override. Sets the location and size of this component.
            </summary>
            <param name="x">A double value specifying horizontal position.</param>
            <param name="y">A double value specifying vertical position.</param>
            <param name="w">A double value specifying the component's width.</param>
            <param name="h">A double value specifying the component's height.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.RangeSelector.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Component.Draw override. Draws this component in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.RangeSelector.GetCursorHint(System.Double,System.Double)">
            <summary>
            Component.GetCursorHint override.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
            <return>
            A member of the CursorHint enumeration.
            </return>
        </member>
        <member name="M:MindFusion.Charting.Components.RangeSelector.CreateController(MindFusion.Charting.RenderContext)">
            <summary>
            Component.CreateController override. Returns a controller used to interact with this component.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>Instance of a ComponentController -derived class.</returns>
        </member>
        <member name="P:MindFusion.Charting.Components.RangeSelector.AxesSource">
            <summary>
            Gets or sets the object whose Axes will be handled by this component.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.RangeSelector.Axis">
            <summary>
            The Axis that will be handled by this component.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.RangeSelector.MinValue">
            <summary>
            Gets or sets the smallest value of the displayed range.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.RangeSelector.MaxValue">
            <summary>
            Gets or sets the largest value of the displayed range.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.RangeSelector.Size">
            <summary>
            Gets or sets the width or height of the component.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.RangeSelector.HandleSize">
            <summary>
            Gets or sets the width or height of resize handles.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.RangeSelector.Brush">
            <summary>
            Gets or sets the Brush used to paint the component's background.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.RangeSelector.ThumbBrush">
            <summary>
            Gets or sets the Brush used to paint the thumb.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.RangeSelector.HandleBrush">
            <summary>
            Gets or sets the Brush used to paint resize handles.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.RangeSelector.Orientation">
            <summary>
            Gets or sets the orientation of the component.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.GridRow">
            <summary>
            Represents a row in a GridPanel.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.GridRow.MeasuredSize">
            <summary>
            Returns the row's measured height.
            </summary>
            <returns>A double value representing the row's height.</returns>
        </member>
        <member name="M:MindFusion.Charting.Components.GridRow.SetPos(System.Double)">
            <summary>
            Sets the row's position.
            </summary>
            <param name="value">Y coordinate of the row.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.GridRow.RelativeSize">
            <summary>
            Gets whether the row should be sized relatively to other rows in the grid panel.
            </summary>
            <returns>true to apply relative size to this row, or false otherwise.</returns>
        </member>
        <member name="P:MindFusion.Charting.Components.GridRow.LengthType">
            <summary>
            Gets or sets the row's sizing mode.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.GridRow.Height">
            <summary>
            Gets or sets fixed height for this row.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.BarRenderer3D">
            <summary>
             A SeriesRenderer that draws 3D bars in its containing plot.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.BarRenderer">
            <summary>
            A SeriesRenderer that draws bars in its containing plot.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Renderer2D">
            <summary>
            A base class for series renderers that draw in two dimensional Cartesian coordinate system.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.SeriesRenderer">
            <summary>
            Base class for renderer objects that draw data series inside a Plot.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.SeriesContainer">
            <summary>
            Defines an interface for enumerating all series associated with a component of the dashboard.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.SeriesContainer.EnumSeries">
            <summary>
            Enumerates the series associated with this component.
            </summary>
            <returns>An instance of the IEnumerable&lt;Series&gt; class.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesContainer.DomainDimension(MindFusion.Charting.Series)">
            <summary>
            Gets the index of the dimension whose set of values should be treated as domain of plotted function.
            </summary>
            <param name="series">A Series in this container.</param>
            <returns>The dimension index.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.#ctor">
            <summary>
            Initializes a new instance of the SeriesRenderer class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.EffectiveFill(System.Int32,System.Int32,MindFusion.Charting.RenderContext)">
            <summary>
            Gets the brush that should be used to fill the representation of specified data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this SeriesRenderer.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <param name="context">A RenderContext instance.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.EffectiveStroke(System.Int32,System.Int32,MindFusion.Charting.RenderContext)">
            <summary>
            Gets the brush that should be used to stroke the representation of specified data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this SeriesRenderer.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <param name="context">A RenderContext instance.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.EffectiveStrokeThickness(System.Int32,System.Int32,MindFusion.Charting.RenderContext)">
            <summary>
            Gets the thickness of the pen that should be used to stroke the representation of specified data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this SeriesRenderer.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <param name="context">A RenderContext instance.</param>
            <returns>A double value.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.EffectiveStrokeDashStyle(System.Int32,System.Int32,MindFusion.Charting.RenderContext)">
            <summary>
            Gets the dash style of the pen that should be used to stroke the representation of specified data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this SeriesRenderer.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <param name="context">A RenderContext instance.</param>
            <returns>A member of the DashStyle enumeration.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.EffectiveStrokePen(System.Int32,System.Int32,MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Pen that should be used to stroke the representation of specified data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this SeriesRenderer.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <param name="context">A RenderContext instance.</param>
            <returns>A Pen instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.SearchStyle(MindFusion.Charting.SeriesRenderer.StyleCheck,MindFusion.Charting.RenderContext)">
            <summary>
            Returns a SeriesStyle object that meets specified criteria.
            </summary>
            <param name="check">A StyleCheck delegate that tests SeriesStyle for some criteria.</param>
            <param name="context">A RenderContext instance used to access styles and theme from the dashboard hierarchy.</param>
            <returns>A SeriesStyle instance, or null if none meets spcified criteria.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.DrawHighlight(MindFusion.Charting.RenderContext,MindFusion.Charting.HitResult)">
            <summary>
            Draws highlighted data item in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="hitResult">A HitResult instance identifying highlighted data item.</param>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.SetToolTip(System.String,MindFusion.PointD,MindFusion.Charting.RenderContext)">
            <summary>
            Sets tooltip text and location.
            </summary>
            <param name="text">A string specifying tooltip text.</param>
            <param name="location">A PointD specifying tooltip location.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.HitTest(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Hit-tests the visual representation of the series for a data item.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for data items.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.NearestElement(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Returns the data item closest to specified point.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for data items.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.MeasureDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            Measures the data range of rendered series and assigns it to the 
            associated Axis objects if their MinValue and MaxValue are not set.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.AdjustDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            Adjusts the data range of associated Axis objects after initial measure pass.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.StartMeasureData(MindFusion.Charting.RenderContext)">
            <summary>
            Called to reset measure accumulators at the beginning of a measure pass.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.EffectiveLabelFont(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Font that should be used to draw labels of data items.
            </summary>
            <param name="context">A RenderContext instance used to find styles and theme from dashboard hierarchy.</param>
            <returns>A Font instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.EffectiveLabelBrush(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the System.Drawing.Brush that should be used to draw labels of data items.
            </summary>
            <param name="context">A RenderContext instance used to find styles and theme from dashboard hierarchy.</param>
            <returns>A System.Drawing.Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.EffectiveLabelBackground(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the System.Drawing.Brush that should be used to draw background of labels.
            </summary>
            <param name="context">A RenderContext instance used to find styles and theme from dashboard hierarchy.</param>
            <returns>A System.Drawing.Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.EffectiveLabelBorderPen(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the System.Drawing.Pen that should be used to draw borders around labels.
            </summary>
            <param name="context">A RenderContext instance used to find styles and theme from dashboard hierarchy.</param>
            <returns>A System.Drawing.Pen instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.CreateTextRenderer(MindFusion.Charting.RenderContext)">
            <summary>
            Returns a TextRenderer used to draw series labels.
            </summary>
            <param name="context">A RenderContext instance used to find styles and theme from dashboard hierarchy.</param>
            <returns>A TextRenderer instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.EnumSeries">
            <summary>
            Implements the SeriesContainer interface. Enumerates the series associated with this component.
            </summary>
            <returns>An instance of the IEnumerable&lt;Series&gt; class.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.DomainDimension(MindFusion.Charting.Series)">
            <summary>
            Implements the SeriesContainer interface. Gets the index of the dimension
            whose set of values should be treated as domain of plotted function.
            </summary>
            <param name="series">A Series in this container.</param>
            <returns>The dimension index.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.Subscribe(MindFusion.Charting.Series)">
            <summary>
            Subscribes to the DataChanged event of specified Series.
            </summary>
            <param name="series">A Series instance.</param>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.Unsubscribe(MindFusion.Charting.Series)">
            <summary>
            Unsubscribes from the DataChanged event of specified Series.
            </summary>
            <param name="series">A Series instance.</param>
        </member>
        <member name="M:MindFusion.Charting.SeriesRenderer.OnSeriesDataChanged(System.Object,System.EventArgs)">
            <summary>
            Called when Series raise their DataChanged event.
            </summary>
            <param name="sender">The Series raising the event.</param>
            <param name="e">An EventArgs instance.</param>
        </member>
        <member name="P:MindFusion.Charting.SeriesRenderer.SeriesStyle">
            <summary>
            A SeriesStyle instance specifying the appearance of series associated with this renderer.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SeriesRenderer.LabelFontName">
            <summary>
            Gets or sets the name of font that should be used to draw labels of data items.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SeriesRenderer.LabelFontSize">
            <summary>
            Gets or sets the size of font that should be used to draw labels of data items.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SeriesRenderer.LabelFontStyle">
            <summary>
            Gets or sets the style of font that should be used to draw labels of data items.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SeriesRenderer.LabelBrush">
            <summary>
            Gets or sets the Brush that should be used to draw labels of data items.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SeriesRenderer.ShowDataLabels">
            <summary>
            Gets or sets the kind of data labels to draw.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SeriesRenderer.ShowHighlight">
            <summary>
            Gets or sets a value indicating whether to show highlights on data items.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SeriesRenderer.ShowToolTips">
            <summary>
            Gets or sets a value indicating whether to show tooltips.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.SeriesRenderer.PropertyChanged">
            <summary>
            Implements the INotifyPropertyChanged interface.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.SeriesRenderer.StyleCheck">
            <summary>
            Defines the signature of filter methods used to find
            SeriesStyle objects that meet specified criteria.
            </summary>
            <param name="style">A SeriesStyle to check.</param>
            <returns>true if the style meets specified criteria, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the Renderer2D class.
            </summary>
            <param name="series">A list of Series that should be rendered by this object.</param>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.EnumVisiblePoints(MindFusion.Charting.RenderContext,MindFusion.Charting.Renderer2D.ProcessPoint)">
            <summary>
            Enumerates the data values of rendered series mapped to plot 2D coordinates.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessPoint callback.</param>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.DomainData(System.Int32,System.Int32)">
            <summary>
            Gets the domain axis coordinate (input value) of specified data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this Renderer2D.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <returns>A double value.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.ImageData(System.Int32,System.Int32)">
            <summary>
            Gets the image axis coordinate (output value) of specified data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this Renderer2D.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <returns>A double value.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.EnumVisiblePoints(MindFusion.Charting.RenderContext,System.Boolean,MindFusion.Charting.Renderer2D.ProcessPoint)">
            <summary>
            Enumerates the data values of rendered series mapped to plot 2D coordinates.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="frontToBack">
            true if the series list should be enumerated from front to back, or false otherwise.
            </param>
            <param name="process">A ProcessPoint callback.</param>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.EnumVisiblePointPairs(MindFusion.Charting.RenderContext,MindFusion.Charting.Renderer2D.ProcessPoints)">
            <summary>
            Enumerates the data values of rendered series mapped to plot 2D coordinates.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessPoints callback.</param>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.EnumVisibleRanges(MindFusion.Charting.RenderContext,MindFusion.Charting.Renderer2D.ProcessRange)">
            <summary>
            Enumerates each series once providing a list of all visible points at each iteration.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessRange callback.</param>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.StartMeasureData(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.StartMeasureData override. Called to reset measure
            accumulators at the beginning of a measure pass.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.EnumSeries">
            <summary>
            Implements the SeriesContainer interface.
            </summary>
            <returns>An instance of the IEnumerable&lt;Series&gt; class.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.MeasureDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.MeasureDataRange override. Measures the data range of
            rendered series and assigns it to the associated Axis objects if
            their MinValue and MaxValue are not set.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.XData(System.Int32,System.Int32)">
            <summary>
            Gets the X value of specified data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this Renderer2D.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <returns>A double value.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.YData(System.Int32,System.Int32)">
            <summary>
            Gets the Y value of specified data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this Renderer2D.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <returns>A double value.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.XSorted(System.Int32)">
            <summary>
            Gets a value indicating whether values of specified series increase monotonously in X dimension.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this Renderer2D.</param>
            <returns>true if specified series is sorted, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.YSorted(System.Int32)">
            <summary>
            Gets a value indicating whether values of specified series increase monotonously in Y dimension.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this Renderer2D.</param>
            <returns>true if specified series is sorted, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.GetPixel(System.Int32,System.Int32,MindFusion.Charting.Axis,MindFusion.Charting.Axis,MindFusion.Charting.Components.Component)">
            <summary>
            Gets the coordinates of specified data item when mapped to a Plot2D pixel.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this Renderer2D.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <param name="xAxis">An Axis reference specifying the X axis.</param>
            <param name="yAxis">An Axis reference specifying the Y axis.</param>
            <param name="component">An instance of Plot2D or derived class.</param>
            <returns>A PointF containing Plot2D coordinates corresponding to specified data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.GetPixel(System.Double,MindFusion.Charting.Axis,System.Double,MindFusion.Charting.Axis,MindFusion.Charting.Components.Component)">
            <summary>
            Gets the coordinates of specified data item when mapped to a Plot2D pixel.
            </summary>
            <param name="valueX">The X value of data item in logical coordinate system.</param>
            <param name="xAxis">The X Axis from which logical value is mapped to plot's actual width.</param>
            <param name="valueY">The Y value of data item in logical coordinate system.</param>
            <param name="yAxis">The Y Axis from which logical value is mapped to plot's actual height.</param>
            <param name="component">An instance of Plot2D or derived class.</param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.GetMaxXSum">
            <summary>
            Gets the maximum sum of X data values locates at same index in all series.
            </summary>
            <returns>A double value containing the maximum sum.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.GetMaxYSum">
            <summary>
            Gets the maximum sum of Y data values locates at same index in all series.
            </summary>
            <returns>A double value containing the maximum sum.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.GetMaxXSumPositive(System.Double)">
            <summary>
            Gets the maximum sum of positive X data values locates at same index in all series.
            </summary>
            <returns>A double value containing the maximum sum.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.GetMinXSumNegative(System.Double)">
            <summary>
            Gets the minimum sum of negative X data values locates at same index in all series.
            </summary>
            <returns>A double value containing the minimum sum.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.GetMaxYSumPositive(System.Double)">
            <summary>
            Gets the maximum sum of positive Y data values locates at same index in all series.
            </summary>
            <returns>A double value containing the maximum sum.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.GetMinYSumNegative(System.Double)">
            <summary>
            Gets the minimum sum of negative Y data values locates at same index in all series.
            </summary>
            <returns>A double value containing the minimum sum.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.GetFirstInRange(System.Int32,MindFusion.Charting.RenderContext)">
            <summary>
            Gets the index of first data item in currently visible plot range.
            </summary>
            <param name="s">An integer value specifying index in Series list.</param>
            <param name="context">A RenderContext instance.</param>
            <returns>An integer index of first visible data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.GetLastInRange(System.Int32,MindFusion.Charting.RenderContext)">
            <summary>
            Gets the index of last data item in currently visible plot range.
            </summary>
            <param name="s">An integer value specifying index in Series list.</param>
            <param name="context">A RenderContext instance.</param>
            <returns>An integer index of last visible data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.GetFirstInRange(System.Int32,MindFusion.Charting.Axis)">
            <summary>
            Gets the index of first data item in specified range.
            </summary>
            <param name="s">An integer value specifying index in Series list.</param>
            <param name="axis">An Axis instance identifying the data range.</param>
            <returns>An integer index of first data item found in specified range.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.GetLastInRange(System.Int32,MindFusion.Charting.Axis)">
            <summary>
            Gets the index of last data item in specified range.
            </summary>
            <param name="s">An integer value specifying index in Series list.</param>
            <param name="axis">An Axis instance identifying the data range.</param>
            <returns>An integer index of last data item found in specified range.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.HitTest(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            SeriesRenderer.HitTest override. Hit-tests the visual representation of the series for a data item.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for data items.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.NearestElement(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            SeriesRenderer.NearestElement override. Returns the data item closest to specified point.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for data items.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.Renderer2D.DrawHighlight(MindFusion.Charting.RenderContext,MindFusion.Charting.HitResult)">
            <summary>
            SeriesRenderer.DrawHighlight override. Draws highlighted data item in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="hitResult">A HitResult instance identifying highlighted data item.</param>
        </member>
        <member name="P:MindFusion.Charting.Renderer2D.Series">
            <summary>
            Gets or sets a list of Series drawn by this Renderer2D.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Renderer2D.XAxis">
            <summary>
            Gets the X axis associated with this Renderer2D.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Renderer2D.YAxis">
            <summary>
            Gets the Y axis associated with this Renderer2D.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Renderer2D.ProcessPoint">
            <summary>
            Defines the signature of delegates called to process a data point one element at a time.
            </summary>
            <param name="seriesIndex">An integer index of series in Series list.</param>
            <param name="dataIndex">An integer index of data item in specified series.</param>
            <param name="point">
            A PointF instance containing the Plot2D coordinates corresponding to current data item.
            </param>
        </member>
        <member name="T:MindFusion.Charting.Renderer2D.ProcessPoints">
            <summary>
            Defines the signature of delegates called to process data points in pairs.
            </summary>
            <param name="seriesIndex">An integer index of series in Series list.</param>
            <param name="dataIndex">An integer index of data item in specified series.</param>
            <param name="point1">
            A PointF instance containing the Plot2D coordinates corresponding to previous data item.
            </param>
            <param name="point2">
            A PointF instance containing the Plot2D coordinates corresponding to current data item.
            </param>
        </member>
        <member name="T:MindFusion.Charting.Renderer2D.ProcessRange">
            <summary>
            Defines the signature of delegates called to process all points from current data range at once.
            </summary>
            <param name="seriesIndex">An integer index of series in Series list.</param>
            <param name="points">
            A list of PointF values containing the Plot2D coordinates
            corresponding to data items in currently visible range.
            </param>
        </member>
        <member name="T:MindFusion.Charting.BarContainer">
            <summary>
            Defines properties common to all bar-chart renderers.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarContainer.HorizontalBars">
            <summary>
            Gets or sets a value identifying whether bars should be horizontal.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarContainer.BarSpacingRatio">
            <summary>
            Gets or sets the ratio of empty space between bars to space occupied by bars.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarContainer.StackOuterLabels">
            <summary>
            Gets or sets whether outer labels are displayed stacked on top of stacked bars,
            instead of showing them on the bar sides.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarContainer.OuterLabelRotation">
            <summary>
            Gets or sets the rotation angle of outer labels. If not specified, labels
            are rotated at predefiend angles depending on bars' orientation and layout.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarContainer.InnerLabelRotation">
            <summary>
            Gets or sets the rotation angle of inner labels. If not specified, labels
            are rotated at predefiend angles depending on bars' orientation and layout.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.BarRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the BarRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as bars.</param>
        </member>
        <member name="M:MindFusion.Charting.BarRenderer.EnumVisibleBars(MindFusion.Charting.RenderContext,MindFusion.Charting.BarRenderer.ProcessBars)">
            <summary>
            Enumerates the bars visible in current data range.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessBars callback.</param>
        </member>
        <member name="M:MindFusion.Charting.BarRenderer.MeasureDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            Renderer2D.MeasureDataRange override. Measures the data range of
            rendered series and assigns it to the associated Axis objects if
            their MinValue and MaxValue are not set.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.BarRenderer.AdjustDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.AdjustDataRange override. Adjusts the data range of associated
            Axis objects after initial measure pass.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.BarRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.BarRenderer.HitTest(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Renderer2D.HitTest override. Hit-tests the bar representations of data items.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a bar.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.BarRenderer.NearestElement(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Renderer2D.NearestElement override. Returns the data item closest to specified point.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a bar.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.BarRenderer.DrawHighlight(MindFusion.Charting.RenderContext,MindFusion.Charting.HitResult)">
            <summary>
            Renderer2D.DrawHighlight override. Draws highlighted bar in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="hitResult">A HitResult instance identifying highlighted data item.</param>
        </member>
        <member name="P:MindFusion.Charting.BarRenderer.HorizontalBars">
            <summary>
            Gets or sets a value indicating whether bars should be horizontal.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarRenderer.SameIndexSpacingRatio">
            <summary>
            Gets or sets the ratio of empty space to occupied space
            in bar groups drawn for data items as same index in each series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarRenderer.BarSpacingRatio">
            <summary>
            Gets or sets the ratio of empty space between adjacent bar groups to space occupied by bars.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarRenderer.StackOuterLabels">
            <summary>
            Gets or sets whether outer labels are displayed stacked on top of stacked bars,
            instead of showing them on the bar sides.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarRenderer.OuterLabelRotation">
            <summary>
            Gets or sets the rotation angle of outer labels. If not specified, labels
            are rotated at predefiend angles depending on bars' orientation and layout.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarRenderer.InnerLabelRotation">
            <summary>
            Gets or sets the rotation angle of inner labels. If not specified, labels
            are rotated at predefiend angles depending on bars' orientation and layout.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.BarRenderer.ProcessBars">
            <summary>
            Defines the signature of delegates called to process bars.
            </summary>
            <param name="seriesIndex">An integer index of series in Series list.</param>
            <param name="dataIndex">An integer index of data item in specified series.</param>
            <param name="bounds">A RectangleF representing the boundaries of current bar.</param>
            <param name="oppositeDirection">The bar is drawn below the axis origin.</param>
        </member>
        <member name="T:MindFusion.Charting.Renderer3D">
            <summary>
            Defines the interface called by Plot3D to build 3D models.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Renderer3D.BuildModels(MindFusion.Charting.ThreeD.Scene3D,MindFusion.Charting.RenderContext)">
            <summary>
            Adds models for the series data to specified scene.
            </summary>
            <param name="scene">A Scene3D instance.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.BarRenderer3D.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the BarRenderer3D class.
            </summary>
            <param name="series">A list of Series that should be rendered as 3D bars.</param>
        </member>
        <member name="M:MindFusion.Charting.BarRenderer3D.BuildModels(MindFusion.Charting.ThreeD.Scene3D,MindFusion.Charting.RenderContext)">
            <summary>
            Implements Renderer3D.BuildModels. Adds 3D bar models for the series data to specified scene.
            </summary>
            <param name="scene">A Scene3D instance.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="T:MindFusion.Charting.RadarScatterRenderer">
            <summary>
            A SeriesRenderer that draws scatter in radar plots.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.ScatterRenderer">
            <summary>
            A SeriesRenderer that draws scatter in its containing plot.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ScatterRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the ScatterRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as scatter.</param>
        </member>
        <member name="M:MindFusion.Charting.ScatterRenderer.EnumPoints(MindFusion.Charting.RenderContext,MindFusion.Charting.Renderer2D.ProcessPoint)">
            <summary>
            Enumerates the data values of rendered series mapped to plot 2D coordinates.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessPoint callback.</param>
        </member>
        <member name="M:MindFusion.Charting.ScatterRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.ScatterRenderer.HitTest(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Renderer2D.HitTest override. Hit-tests the scatter representations of data items.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for data items.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.ScatterRenderer.NearestElement(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Renderer2D.NearestElement override. Returns the data item closest to specified point.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for data items.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.ScatterRenderer.DrawHighlight(MindFusion.Charting.RenderContext,MindFusion.Charting.HitResult)">
            <summary>
            Renderer2D.DrawHighlight override. Draws highlighted shape in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="hitResult">A HitResult instance identifying highlighted data item.</param>
        </member>
        <member name="P:MindFusion.Charting.ScatterRenderer.ShapeSize">
            <summary>
            Gets or sets the size of scatter shapes.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ScatterRenderer.Shape">
            <summary>
            Gets or sets the type of scatter shapes.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.RadarScatterRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the RadarScatterRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as scatter.</param>
        </member>
        <member name="M:MindFusion.Charting.RadarScatterRenderer.MeasureDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            Renderer2D.MeasureDataRange override. Measures the data range of
            rendered series and assigns it to the associated Axis objects if
            their MinValue and MaxValue are not set.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.RadarScatterRenderer.EnumPoints(MindFusion.Charting.RenderContext,MindFusion.Charting.Renderer2D.ProcessPoint)">
            <summary>
            ScatterRenderer.EnumPoints override. Enumerates the data values
            of rendered series mapped to plot's 2D coordinates.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessPoint callback.</param>
        </member>
        <member name="T:MindFusion.Charting.PolarPlot">
            <summary>
            A plot used to draw graphics in polar coordinate system.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Plot">
            <summary>
            The base class for components used to draw chart graphics.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Plot.StartMeasureData(MindFusion.Charting.RenderContext)">
            <summary>
            Called in the beginning of data measurement pass.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot.MeasureDataRanges(MindFusion.Charting.RenderContext)">
            <summary>
            Measures data of all SeriesRenderer objects drawn inside this plot.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot.AdjustDataRanges(MindFusion.Charting.RenderContext)">
            <summary>
            Called at the end of data measurement pass.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Measure override. Measures the desired size of this component.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Component.Draw override. Draws a grid and all chart graphics
            represented by contained SeriesRenderer objects.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot.DrawPlot(MindFusion.Charting.RenderContext)">
            <summary>
            Draws the plot's background and borders.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot.DrawGrid(MindFusion.Charting.RenderContext)">
            <summary>
            Draws the plot's grid.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot.DrawOrigins(MindFusion.Charting.RenderContext)">
            <summary>
            Draws the plot's axis origin lines.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot.Unsubscribe(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.SeriesRenderer})">
            <summary>
            Unsubscribes from DataChanged and PropertyChanged events
            of all SeriesRenderer objects in specified list.
            </summary>
            <param name="seriesRenderers">A list of SeriesRenderer objects.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot.OnRendererDataChanged(System.Object,System.EventArgs)">
            <summary>
            Called when a Series raises its DataChanged event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">An EventArgs instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot.EnumSeries">
            <summary>
            Implements SeriesContainer.
            </summary>
            <returns>An instance of the IEnumerable&lt;Series&gt; class.</returns>
        </member>
        <member name="M:MindFusion.Charting.Plot.DomainDimension(MindFusion.Charting.Series)">
            <summary>
            Implements the SeriesContainer interface. Gets the index of the dimension
            whose set of values should be treated as domain of plotted function.
            </summary>
            <param name="series">A Series in this container.</param>
            <returns>The dimension index.</returns>
        </member>
        <member name="M:MindFusion.Charting.Plot.EffectiveFill(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Brush that should be used to fill the plot's background.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.Plot.EffectiveBorder(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Pen that should be used to draw the plot's borders.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A Pen instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.Plot.EffectiveBorderStroke(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Brush that should be used to stroke the plot's borders.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.Plot.EffectiveBorderStrokeThickness(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the thickness of border strokes.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A double value.</returns>
        </member>
        <member name="M:MindFusion.Charting.Plot.EffectiveStrokeDashStyle(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the dash style of border strokes.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A member of the DashStyle enumeration.</returns>
        </member>
        <member name="P:MindFusion.Charting.Plot.SeriesStyle">
            <summary>
            Gets or sets a SeriesStyle whose attributes should be used to
            draw series inside this plot, unless their own renderers
            have a local SeriesStyle value set for respective attribute.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot.HighlightedItem">
            <summary>
            Gets or sets the data item that should be drawn highlighted.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot.SeriesRenderers">
            <summary>
            Gets or sets the SeriesRenderer objects that should draw inside this plot.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot.Background">
            <summary>
            Gets or sets the Brush that should be used to fill the background of this plot.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot.BorderStroke">
            <summary>
            Gets or sets the Brush that should be used to stroke the borders of this plot.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot.BorderStrokeThickness">
            <summary>
            Gets or sets the stroke thickness of plot borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot.BorderStrokeDashStyle">
            <summary>
            Gets or sets the stroke dash style of plot borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot.HighlightStroke">
            <summary>
            Gets or sets the Brush used to stroke highlighted item.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot.HighlightStrokeThickness">
            <summary>
            Gets or sets the stroke thickness of highlighted item.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot.HighlightStrokeDashStyle">
            <summary>
            Gets or sets the stroke dash style of highlighted item.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PolarPlot.#ctor">
            <summary>
            Initializes a new instance of the PolarPlot class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PolarPlot.CreateController(MindFusion.Charting.RenderContext)">
            <summary>
            Component.CreateController override. Returns a ComponentController
            used to interact with this component.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>An instance of the RotationController class.</returns>
        </member>
        <member name="M:MindFusion.Charting.PolarPlot.Visit(MindFusion.Charting.Components.ComponentVisitor)">
            <summary>
            Component.Visit override. Calls visitor's VisitPlot method.
            </summary>
            <param name="visitor">An instance of a ComponentVisitor -derived class.</param>
        </member>
        <member name="M:MindFusion.Charting.PolarPlot.RotatePoint(System.Drawing.PointF,System.Drawing.PointF,System.Double)">
            <summary>
            Rotates point around specified rotation center at specified angle.
            </summary>
            <param name="pointToRotate">The point to rotate.</param>
            <param name="centerPoint">The rotation center.</param>
            <param name="angleInDegrees">The rotation angle.</param>
            <returns></returns>
        </member>
        <member name="P:MindFusion.Charting.PolarPlot.Padding">
            <summary>
            Gets or sets padding space between the plot's border and series graphics.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PolarPlot.StartAngle">
            <summary>
            Gets or sets the angle where first data item of series should be drawn.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PolarPlot.AllowRotate">
            <summary>
            Gets or sets a value indicating whether users are allowed to rotate this plot.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.PanController">
            <summary>
            Represents a controller that pans its plot's data range.
            </summary>
            <summary>
            Represents a controller that pans its plot's data range.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Plot2DController">
            <summary>
            A base class for controllers that let users interact with Plot2D objects.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Plot2DController.#ctor(MindFusion.Charting.RenderContext,System.Boolean)">
            <summary>
            Initializes a new instance of the Plot2DController class.
            </summary>
            <param name="renderContext">A RenderContext instance.</param>
            <param name="vertical">
            true to implement interaction along the Y axis, or false for the X axis.
            </param>
        </member>
        <member name="M:MindFusion.Charting.Plot2DController.OnMouseDown(System.Double,System.Double)">
            <summary>
            PlotController.OnMouseDown override. Called when the user presses a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot2DController.PlotToAxisValue(MindFusion.Charting.Axis,System.Double)">
            <summary>
            Converts a plot pixel position to a logical value from specified axis' coordinate system.
            </summary>
            <param name="axis">The target Axis.</param>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="F:MindFusion.Charting.Plot2DController.axisRanges">
            <summary>
            Contains information about Axis ranges processed by this controller.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2DController.Vertical">
            <summary>
            Gets or sets a value indicating whether interaction is done along the X or Y axis.
            </summary>
            <value>
            true to implement interaction along the Y axis, or false for the X axis.
            </value>
        </member>
        <member name="T:MindFusion.Charting.Plot2DController.AxisInfo">
            <summary>
            Stores information about Axis ranges processed by this controller.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Plot2DController.AxisInfo.Resolution">
            <summary>
            The axis resolution.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Plot2DController.AxisInfo.Origin">
            <summary>
            The axis origin.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Plot2DController.AxisInfo.Range">
            <summary>
            The axis range.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PanController.#ctor(MindFusion.Charting.RenderContext,System.Boolean)">
            <summary>
            Initializes a new instance of the PanController class.
            </summary>
            <param name="renderContext">A RenderContext instance.</param>
            <param name="vertical">
            true to implement interaction along the Y axis, or false for the X axis.
            </param>
        </member>
        <member name="M:MindFusion.Charting.PanController.OnMouseDown(System.Double,System.Double)">
            <summary>
            Plot2DController.OnMouseDown override. Called when the user presses a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.PanController.OnMouseMove(System.Double,System.Double)">
            <summary>
            PlotController.OnMouseMove override. Called when the user moves the mouse.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.PanController.OnMouseUp(System.Double,System.Double)">
            <summary>
            PlotController.OnMouseUp override. Called when the user releases a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.PanController.GetRunningAnimation">
            <summary>
            For internal use.
            </summary>
            <returns>An instance of a ComponentAnimation -derived class.</returns>
        </member>
        <member name="P:MindFusion.Charting.PanController.EnableAnimation">
            <summary>
            Gets or sets whether to enable pan inertia.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.ThreeD.Mesh3D">
            <summary>
            Represents a 3D mesh.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.ThreeD.Model3D">
            <summary>
            Represents a three-dimensional model.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Model3D.#ctor">
            <summary>
            Initializes a new instance of the Model3D class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Model3D.#ctor(MindFusion.Drawing.Brush)">
            <summary>
            Initializes a new instance of the Model3D class.
            </summary>
            <param name="brush">The Brush used to fill this model's projection.</param>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Mesh3D.#ctor">
            <summary>
            Initializes a new instance of the Mesh3D class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Mesh3D.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{MindFusion.Charting.Point3D}},MindFusion.Drawing.Brush)">
            <summary>
            Initializes a new instance of the Mesh3D class.
            </summary>
            <param name="facePoints">Lists of points defining mesh faces.</param>
            <param name="brush">The Brush used to paint this mesh.</param>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Mesh3D.Faces">
            <summary>
            Gets or sets the mesh faces.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.LabelKinds">
            <summary>
            Identifies the various kinds of labels that can be drawn for data items.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.LabelKinds.None">
            <summary>
            Do not draw labels.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.LabelKinds.InnerLabel">
            <summary>
            Draw inner label in graphic representation of data item.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.LabelKinds.OuterLabel">
            <summary>
            Draw outer label nearby graphic representation of data item.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.LabelKinds.ToolTip">
            <summary>
            Show label as a tooltip.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.LabelKinds.XAxisLabel">
            <summary>
            Draw data label at X axis.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.LabelKinds.YAxisLabel">
            <summary>
            Draw data label at Y axis.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.LabelKinds.ZAxisLabel">
            <summary>
            Draw data label at Z axis.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.LabelKinds.All">
            <summary>
            Draw all labels supported by a series.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.RadarType">
            <summary>
            Identifies the type of radar-chart.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.RadarType.Polygon">
            <summary>
            Draw each series as a polygon.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.RadarType.Pie">
            <summary>
            Draw data items as circular sectors.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Properties.Resources.ZoomOut">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Properties.Resources.ZoomReset">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Pair`2">
            <summary>
            Contains two values.
            </summary>
            <typeparam name="T1">Type of first value.</typeparam>
            <typeparam name="T2">Type of second value.</typeparam>
        </member>
        <member name="M:MindFusion.Charting.Pair`2.#ctor">
            <summary>
            Initializes a new instance of the Pair class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the Pair class.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="M:MindFusion.Charting.Pair`2.ToString">
            <summary>
            Object.ToString override.
            </summary>
            <returns>A string representation of the pair.</returns>
        </member>
        <member name="P:MindFusion.Charting.Pair`2.First">
            <summary>
            Gets or sets the first value.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Pair`2.Second">
            <summary>
            Gets or sets the second value.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.HitTestVisibility">
            <summary>
            Identifies hit-test visibility of a component.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.HitTestVisibility.Hidden">
            <summary>
            Do not participate in hit-testing.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.HitTestVisibility.Children">
            <summary>
            Only hit-test child components.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.HitTestVisibility.SelfAndChildren">
            <summary>
            Hit-test this component and its children.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.UndoManager.StartChangeOperation(MindFusion.Charting.INotifyPropertyValueChanged)">
            <summary>
            Creates a Command object to track subsequent changes on the specified target.
            </summary>
            <param name="target">
            The object to track.
            </param>
            <returns>
            A TrackChangesCommand that is used to track the changes, or null, if undo is disabled.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Commands.UndoManager.CancelChangeOperation(MindFusion.Charting.Commands.TrackChangesCommand)">
            <summary>
            Stops tracking changes by the specified command and reverts all changes done so far.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.UndoManager.CommitChangeOperation(MindFusion.Charting.Commands.TrackChangesCommand)">
            <summary>
            Stops tracking changes by the specified command and saves the command in the history queue.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Axis">
            <summary>
            Represents an Axis range.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Axis.#ctor">
            <summary>
            Initializes a new instance of the Axis class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Axis.InRange(System.Double)">
            <summary>
            Determines whether specified value is within the axis range.
            </summary>
            <param name="value">A double value.</param>
            <returns>true if value is inside the current axis range, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Axis.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">Specifies the name of changed property.</param>
        </member>
        <member name="M:MindFusion.Charting.Axis.MapValueToPixelX(System.Double,System.Double)">
            <summary>
            Maps a value from this axis' coordinate system to a pixel position in specified view.
            </summary>
            <param name="value">A double value.</param>
            <param name="viewSize">The view size.</param>
            <returns>X coordinate of pixel.</returns>
        </member>
        <member name="M:MindFusion.Charting.Axis.MapValueToPixelY(System.Double,System.Double)">
            <summary>
            Maps a value from this axis' coordinate system to a pixel position in specified view.
            </summary>
            <param name="value">A double value.</param>
            <param name="viewSize">The view size.</param>
            <returns>Y coordinate of pixel.</returns>
        </member>
        <member name="E:MindFusion.Charting.Axis.PropertyChanged">
            <summary>
            Implements INotifyPropertyChanged.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Axis.Title">
            <summary>
            Gets or sets the axis title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Axis.MinValue">
            <summary>
            Gets or sets the smallest value displayed on this axis.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Axis.MaxValue">
            <summary>
            Gets or sets the largest value displayed on this axis.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Axis.Origin">
            <summary>
            Gets or sets the origin of this axis.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Axis.Interval">
            <summary>
            Gets or sets the size of axis intervals.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Axis.NumberFormat">
            <summary>
            Gets or sets the number format of coordinate labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Axis.CustomFormat">
            <summary>
            Gets or sets a custom format provider to use 
            when formatting coordinate labels.
            </summary>
            <remarks>
            The custom formatter is expected to implement IFormatProvider.GetFormat 
            and ICustomFormatter.Format methods.
            </remarks>
        </member>
        <member name="T:MindFusion.Charting.AnnotationRenderer">
            <summary>
            A SeriesRenderer that draws annotations in its containing plot.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.AnnotationRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the AnnotationRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as annotations.</param>
        </member>
        <member name="M:MindFusion.Charting.AnnotationRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="T:MindFusion.Charting.Vector">
            <summary>
            Represents a two-dimensional vector.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Vector.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Vector struct.
            </summary>
            <param name="x">X component of the vector.</param>
            <param name="y">Y component of the vector.</param>
        </member>
        <member name="M:MindFusion.Charting.Vector.Equals(MindFusion.Charting.Vector,MindFusion.Charting.Vector)">
            <summary>
            Determines if two vectors are equal.
            </summary>
            <param name="vector1">The first vector to compare.</param>
            <param name="vector2">The second vector to compare.</param>
            <returns>true if vectors are equal, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.Equals(System.Object)">
            <summary>
            Object.Equals override.
            </summary>
            <param name="o">An object to compare with this vector.</param>
            <returns>true if vectors are equal, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.Equals(MindFusion.Charting.Vector)">
            <summary>
            Determines if specified vector is equal to this one.
            </summary>
            <param name="value">The vector to compare with this one.</param>
            <returns>true if vectors are equal, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.GetHashCode">
            <summary>
            Object.GetHashCode override.
            </summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.ToString">
            <summary>
            Object.ToString override.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.ToString(System.IFormatProvider)">
            <summary>
            Gets a string representation of this vector.
            </summary>
            <param name="provider">An IFormatProvider instance.</param>
            <returns>The string representation of this vector.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.Normalize">
            <summary>
            Makes this vector a unit vector.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Vector.CrossProduct(MindFusion.Charting.Vector,MindFusion.Charting.Vector)">
            <summary>
            Returns the size of cross-product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The size of cross-product.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.AngleBetween(MindFusion.Charting.Vector,MindFusion.Charting.Vector)">
            <summary>
            Determines the angle between two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The angle between specified vectors.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.Negate">
            <summary>
            Reverses the direction of this vector.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Vector.Add(MindFusion.Charting.Vector,MindFusion.Charting.Vector)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>A vector representing the sum of specified vectors.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.Subtract(MindFusion.Charting.Vector,MindFusion.Charting.Vector)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>A vector representing the difference between specified vectors.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.Add(MindFusion.Charting.Vector,System.Drawing.PointF)">
            <summary>
            Translates point by a vector.
            </summary>
            <param name="vector">The vector to add.</param>
            <param name="point">The reference point.</param>
            <returns>The translated point.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.Multiply(MindFusion.Charting.Vector,System.Double)">
            <summary>
            Multiplies vector by a scalar.
            </summary>
            <param name="vector">The vector to multiply.</param>
            <param name="scalar">The scalar value.</param>
            <returns>A vector containing the multiplication result.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.Multiply(System.Double,MindFusion.Charting.Vector)">
            <summary>
            Multiplies vector by a scalar.
            </summary>
            <param name="scalar">The scalar value.</param>
            <param name="vector">The vector to multiply.</param>
            <returns>A vector containing the multiplication result.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.Divide(MindFusion.Charting.Vector,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector to divide.</param>
            <param name="scalar">The scalar value.</param>
            <returns>A vector containing the division result.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.Multiply(MindFusion.Charting.Vector,MindFusion.Charting.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.Determinant(MindFusion.Charting.Vector,MindFusion.Charting.Vector)">
            <summary>
            Finds the determinant of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The determinant.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.op_Equality(MindFusion.Charting.Vector,MindFusion.Charting.Vector)">
            <summary>
            Compares two vectors for equality.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>true if the vectors are equal, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.op_Inequality(MindFusion.Charting.Vector,MindFusion.Charting.Vector)">
            <summary>
            Compares two vectors for inequality.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>true if the vectors are inequal, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.op_Explicit(MindFusion.Charting.Vector)~System.Drawing.PointF">
            <summary>
            Converts specified vector to a point.
            </summary>
            <param name="vector">The vector to convert.</param>
            <returns>A PointF instance containing point's coordinates.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.op_Addition(MindFusion.Charting.Vector,MindFusion.Charting.Vector)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>A vector representing the sum of specified vectors.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.op_Addition(MindFusion.Charting.Vector,System.Drawing.PointF)">
            <summary>
            Translates point by a vector.
            </summary>
            <param name="vector">The vector to add.</param>
            <param name="point">The reference point.</param>
            <returns>The translated point.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.op_UnaryNegation(MindFusion.Charting.Vector)">
            <summary>
            Returns the reversed vector.
            </summary>
            <param name="vector">The vector to reverse.</param>
            <returns>The reversed vector.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.op_Subtraction(MindFusion.Charting.Vector,MindFusion.Charting.Vector)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>A vector representing the difference between specified vectors.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.op_Division(MindFusion.Charting.Vector,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">The vector to divide.</param>
            <param name="scalar">The scalar value.</param>
            <returns>A vector containing the division result.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.op_Multiply(MindFusion.Charting.Vector,MindFusion.Charting.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.op_Multiply(System.Double,MindFusion.Charting.Vector)">
            <summary>
            Multiplies vector by a scalar.
            </summary>
            <param name="scalar">The scalar value.</param>
            <param name="vector">The vector to multiply.</param>
            <returns>A vector containing the multiplication result.</returns>
        </member>
        <member name="M:MindFusion.Charting.Vector.op_Multiply(MindFusion.Charting.Vector,System.Double)">
            <summary>
            Multiplies vector by a scalar.
            </summary>
            <param name="vector">The vector to multiply.</param>
            <param name="scalar">The scalar value.</param>
            <returns>A vector containing the multiplication result.</returns>
        </member>
        <member name="P:MindFusion.Charting.Vector.X">
            <summary>
            Gets or sets the X component of this vector.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Vector.Y">
            <summary>
            Gets or sets the Y component of this vector.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Vector.Length">
            <summary>
            Gets the length of this vector.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Vector.LengthSquared">
            <summary>
            Gets the squared length of this vector.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.ThreeD.Scene3D">
            <summary>
            Represents a 3D scene.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Scene3D.#ctor">
            <summary>
            Initializes a new instance of the Scene3D class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Scene3D.AddCuboid(MindFusion.Charting.Point3D,MindFusion.Charting.Point3D,MindFusion.Drawing.Brush)">
            <summary>
            Adds a cuboid model to the scene.
            </summary>
            <param name="p1">A corner point of the cuboid.</param>
            <param name="p2">The diametrically opposite corner of specified point.</param>
            <param name="brush">The Brush used to paint the cuboid model.</param>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Scene3D.AddCuboid(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,MindFusion.Drawing.Brush)">
            <summary>
            Adds a cuboid model to the scene.
            </summary>
            <param name="x1">X coordinate of a corner point of the cuboid.</param>
            <param name="y1">Y coordinate of a corner point of the cuboid.</param>
            <param name="z1">Z coordinate of a corner point of the cuboid.</param>
            <param name="x2">X coordinate of diametrically opposite corner.</param>
            <param name="y2">Y coordinate of diametrically opposite corner.</param>
            <param name="z2">Z coordinate of diametrically opposite corner.</param>
            <param name="brush">The Brush used to paint the cuboid model.</param>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Scene3D.BuildCuboid(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,MindFusion.Drawing.Brush)">
            <summary>
            Creates a cuboid model.
            </summary>
            <param name="x1">X coordinate of a corner point of the cuboid.</param>
            <param name="y1">Y coordinate of a corner point of the cuboid.</param>
            <param name="z1">Z coordinate of a corner point of the cuboid.</param>
            <param name="x2">X coordinate of diametrically opposite corner.</param>
            <param name="y2">Y coordinate of diametrically opposite corner.</param>
            <param name="z2">Z coordinate of diametrically opposite corner.</param>
            <param name="brush">The Brush used to paint the cuboid model.</param>
            <returns>A Mesh3D containing the cuboid faces.</returns>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Scene3D.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Draws a projection of this scene in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Scene3D.Project(MindFusion.Charting.Point3D)">
            <summary>
            Projects specified point on projection plane.
            </summary>
            <param name="point">A Point3D to project.</param>
            <returns>A Point3D containing projection coordinates.</returns>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Scene3D.Project(MindFusion.Charting.ThreeD.Model3D)">
            <summary>
            Projects specified model on projection plane.
            </summary>
            <param name="model">A Model3D to project.</param>
            <returns>Enumeration of Projection objects.</returns>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Scene3D.Project(MindFusion.Charting.ThreeD.Polygon3D)">
            <summary>
            Projects specified polygon on projection plane.
            </summary>
            <param name="polygon">A Polygon3D to project.</param>
            <returns>A Polygon3D containing projection coordinates.</returns>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Scene3D.Models">
            <summary>
            Gets or sets a list of models in this scene.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Scene3D.Projections">
            <summary>
            Gets or sets a list of projections in this scene.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Scene3D.CameraPosition">
            <summary>
            Gets or sets the camera position.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Scene3D.CameraOrientation">
            <summary>
            Gets or sets the camera orientation.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Scene3D.FocalLength">
            <summary>
            Gets or sets the camera focal length.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Scene3D.ViewportCenter">
            <summary>
            Gets or sets the viewport center.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.PerSeriesStyle">
            <summary>
            Implements SeriesStyle using a different set of attributes for each series,
            where all elements in a single series have common appearance.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.SeriesStyle">
            <summary>
            Defines appearance attributes of series elements.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.SeriesStyle.Fill(System.Int32,System.Int32)">
            <summary>
            Returns a Brush that should be used to fill specified element of specified series.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesStyle.Stroke(System.Int32,System.Int32)">
            <summary>
            Returns a Brush that should be used to stroke specified element of specified series.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesStyle.StrokeThickness(System.Int32,System.Int32)">
            <summary>
            Returns the thickness of the stroke used to draw specified element of specified series.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A nullable double value specifying stroke thickness.</returns>
        </member>
        <member name="M:MindFusion.Charting.SeriesStyle.StrokeDashStyle(System.Int32,System.Int32)">
            <summary>
            Returns the dash style of the stroke used to draw specified element of specified series.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A nullable DashStyle value specifying stroke dash style.</returns>
        </member>
        <member name="M:MindFusion.Charting.PerSeriesStyle.#ctor">
            <summary>
            Initializes a new instance of the PerSeriesStyle class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PerSeriesStyle.#ctor(System.Collections.Generic.List{MindFusion.Drawing.Brush},System.Collections.Generic.List{MindFusion.Drawing.Brush},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Drawing.Drawing2D.DashStyle})">
            <summary>
            Initializes a new instance of the PerSeriesStyle class.
            </summary>
            <param name="fills">A list of brushes, each Brush used to fill all elements of a series.</param>
            <param name="strokes">A list of brushes, each Brush used to stroke all elements of a series.</param>
            <param name="strokeThicknesses">A list of stroke thicknesses, each thickness applied to all elements of a series.</param>
            <param name="strokeDashStyles">A list of dash styles, each style applied to all elements of a series.</param>
        </member>
        <member name="M:MindFusion.Charting.PerSeriesStyle.Fill(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.Fill. Returns a Brush from
            the Fills list that matches specified series index.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.PerSeriesStyle.Stroke(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.Stroke. Returns a Brush from
            the Strokes list that matches specified series index.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.PerSeriesStyle.StrokeThickness(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.StrokeThickness. Returns a value from
            the StrokeThicknesses list that matches specified series index.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A nullable double value specifying stroke thickness.</returns>
        </member>
        <member name="M:MindFusion.Charting.PerSeriesStyle.StrokeDashStyle(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.StrokeDashStyle. Returns a value from
            the StrokeDashStyles list that matches specified series index.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A nullable DashStyle value specifying stroke dash style.</returns>
        </member>
        <member name="P:MindFusion.Charting.PerSeriesStyle.Fills">
            <summary>
            Gets or sets a list of brushes, each Brush used to fill all elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PerSeriesStyle.Strokes">
            <summary>
            Gets or sets a list of brushes, each Brush used to stroke all elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PerSeriesStyle.StrokeThicknesses">
            <summary>
            Gets or sets a list of stroke thicknesses, each thickness applied to all elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PerSeriesStyle.StrokeDashStyles">
            <summary>
            Gets or sets a list of dash styles, each style applied to all elements of a series.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.CurveAreaRenderer">
            <summary>
            A SeriesRenderer that draws each series as an area with curved boundaries in its containing plot.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.AreaRenderer">
            <summary>
            A SeriesRenderer that draws each series as an area in its containing plot.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.AreaRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.AreaRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the AreaRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as areas.</param>
        </member>
        <member name="P:MindFusion.Charting.AreaRenderer.AreaOpacity">
            <summary>
            Gets or sets the opacity of area polygons.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.CurveAreaRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the CurveAreaRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as areas.</param>
        </member>
        <member name="M:MindFusion.Charting.CurveAreaRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            AreaRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="T:MindFusion.Charting.Converter">
            <summary>
            Provides capabilities to convert various types to and from strings
            in a cutlure-independent way.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToBoolean(System.String)">
            <summary>
            Converts the specified string value to bool.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A boolean value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromBoolean(System.Boolean)">
            <summary>
            Converts the specified bool value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToDecimal(System.String)">
            <summary>
            Converts the specified string value to decimal.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A decimal value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromDecimal(System.Decimal)">
            <summary>
            Converts the specified decimal to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToSingle(System.String)">
            <summary>
            Converts the specified string value to float.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A float value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromSingle(System.Single)">
            <summary>
            Converts the specified float value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToDouble(System.String)">
            <summary>
            Converts the specified string value to double.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A double value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromDouble(System.Double)">
            <summary>
            Converts the specified double value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToByte(System.String)">
            <summary>
            Converts the specified string value to byte value.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A byte value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromByte(System.Byte)">
            <summary>
            Converts the specified byte value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToSByte(System.String)">
            <summary>
            Converts the specified string value to 8-bit signed integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            An 8-bit signed integer value that is deserialized from the
            specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromSByte(System.SByte)">
            <summary>
            Converts the specified 8-bit signed integer to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToUint16(System.String)">
            <summary>
            Converts the specified string value to unsigned 16-bit integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            An unsigned 16-bit integer value that is deserialized from
            the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromUInt16(System.UInt16)">
            <summary>
            Converts the specified unsigned 16-bit integer value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToUint32(System.String)">
            <summary>
            Converts the specified string value to unsigned 32-bit integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            An unsigned 32-bit integer value that is deserialized from
            the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromUInt32(System.UInt32)">
            <summary>
            Converts the specified unsigned 32-bit integer value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToUint64(System.String)">
            <summary>
            Converts the specified string value to unsigned 64-bit integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <remarks>
            An unsigned 64-bit integer value that is deserialized from
            the specified string.
            </remarks>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromUInt64(System.UInt64)">
            <summary>
            Converts the specified unsigned 64-bit integer value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToChar(System.String)">
            <summary>
            Converts the specified string value to char.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A char value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromChar(System.Char)">
            <summary>
            Converts the specified char value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToInt16(System.String)">
            <summary>
            Converts the specified string value to 16-bit integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A 16-bit integer value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromInt16(System.Int16)">
            <summary>
            Converts the specified 16-bit integer value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToInt32(System.String)">
            <summary>
            Converts the specified string value to 32-bit integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A 32-bit integer value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToInt32(System.String,System.Int32)">
            <summary>
            Converts the specified string value to 32-bit integer without throwing
            exceptions. In case the specified string cannot be converted, the
            specified default value is returned.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <param name="defaultValue">
            The default value to return if s cannot be deserialized.
            </param>
            <returns>
            A 32-bit integer value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromInt32(System.Int32)">
            <summary>
            Converts the specified 32-bit integer value to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToInt64(System.String)">
            <summary>
            Converts the specified string value to 64-bit integer.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A 64-bit integer value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromInt64(System.Int64)">
            <summary>
            Converts the specified 64-bit integer to string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToColor(System.String)">
            <summary>
            Converts the specified string value to Color.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A Color value that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromColor(System.Drawing.Color)">
            <summary>
            Converts the specified color value to string in the format #AARRGGBB.
            </summary>
            <param name="val">
            The value to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ImageFromString(System.String)">
            <summary>
            Converts the specified string value to image.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            An instance of the .NET Image class that is deserialized
            from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToImageV4(System.String)">
            <summary>
            Converts the specified string value to image.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A .NET Image object that is deserialized from the specified string.
            </returns>
            <remarks>
            This method is used in XML file format 4 and earlier.
            </remarks>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromImageV4(System.Drawing.Image)">
            <summary>
            Converts the specified image to string.
            </summary>
            <param name="val">
            The Image object to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
            <remarks>
            This method is used in XML file format 4 and earlier.
            </remarks>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToImage(System.String)">
            <summary>
            Converts the specified string value to image.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromImage(System.Drawing.Image)">
            <summary>
            Converts the specified image to string.
            </summary>
            <param name="val">
            The image object to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToStreamV4(System.String)">
            <summary>
            Converts the specified string value to stream.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A .NET Stream object that is deserialized from the specified string.
            </returns>
            <remarks>
            This method is used in XML file format 4 and earlier.
            </remarks>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromStreamV4(System.IO.MemoryStream)">
            <summary>
            Converts the specified memory stream to string.
            </summary>
            <param name="val">
            The Stream object to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
            <remarks>
            This method is used in XML file format 4 and earlier.
            </remarks>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToStream(System.String)">
            <summary>
            Converts the specified string value to stream.
            </summary>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A .NET Stream object that is deserialized from the specified string.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromStream(System.IO.Stream)">
            <summary>
            Converts the specified stream to string.
            </summary>
            <param name="val">
            The Stream object to convert.
            </param>
            <returns>
            A string representing the specified value.
            </returns>
        </member>
        <member name="M:MindFusion.Charting.Converter.FromEnum(System.Object)">
            <summary>
            Converts the specified enum value to a string.
            </summary>
            <param name="val">
            The value to convert.
            </param>
        </member>
        <member name="M:MindFusion.Charting.Converter.ToEnum(System.Type,System.String)">
            <summary>
            Converts the specified string value to its corresponding
            enumeration member of the specified type.
            </summary>
            <param name="type">
            The type of the enumeration to convert to.
            </param>
            <param name="s">
            The string value to convert from.
            </param>
            <returns>
            A member of the specified enumeration that is deserialized from
            the specified string, possibly a null reference (Nothing in Visual
            Basic) if the deserialization failed.
            </returns>
        </member>
        <member name="T:MindFusion.Charting.LegendController">
            <summary>
            Lets users move a legend within the boundaries of its parent Panel.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.LegendController.#ctor(MindFusion.Charting.RenderContext)">
            <summary>
            Initializes a new instance of the LegendController class.
            </summary>
            <param name="renderContext">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.LegendController.OnMouseDown(System.Double,System.Double)">
            <summary>
            Implements ComponentController.OnMouseDown. Called when the user presses a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.LegendController.OnMouseMove(System.Double,System.Double)">
            <summary>
            Implements ComponentController.OnMouseMove. Called when the user moves the mouse.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="T:MindFusion.Charting.Components.TextComponent">
            <summary>
            Represents a Component that draws text.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.TextComponent.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Measure override. Measures the desired size of this component.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.TextComponent.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Component.Draw override. Draws associated Text in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="P:MindFusion.Charting.Components.TextComponent.Text">
            <summary>
            Gets or sets the text that should be drawn inside this component.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.TextComponent.FontName">
            <summary>
            Gets or sets the name of the font that should be used to draw the component's text.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.TextComponent.FontSize">
            <summary>
            Gets or sets the size of the font that should be used to draw the component's text.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.TextComponent.FontStyle">
            <summary>
            Gets or sets the style of the font that should be used to draw the component's text.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.TextComponent.TextBrush">
            <summary>
            Gets or sets the Brush that should be used to draw the component's text.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.TextComponent.StyleHint">
            <summary>
            Gets or sets a value indicating which attribute values this component should inherit
            from current Theme if its local text appearance properties are not set.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Commands.DisposableCommand">
            <summary>
            Represents a command that implements the IDisposable interface.
            </summary>
            <remarks>
            A DisposableCommand is automatically committed when disposed unless
            it has been already executed or cancelled.
            </remarks>
        </member>
        <member name="T:MindFusion.Charting.Commands.Command">
            <summary>
            Represents an action that modifies an object and whose effects can be undone.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.Command.#ctor(MindFusion.Charting.Commands.UndoManager)">
            <summary>
            Initializes a new instance of the Command class.
            </summary>
            <param name="manager">
            The UndoManager that contains this command.
            </param>
        </member>
        <member name="M:MindFusion.Charting.Commands.Command.Commit">
            <summary>
            A shortcut method for executing the command through the undo engine.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.Command.Execute">
            <summary>
            Carries out an action that changes the workbook in some way.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.Command.Undo">
            <summary>
            Undoes an action, restoring the workbook to the state it was in
            before carrying out the action.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.Command.Redo">
            <summary>
            Repeats an action that has been undone.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Commands.Command.Manager">
            <summary>
            Gets the UndoManager that contains this command.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Commands.Command.HasEffect">
            <summary>
            Gets a value indicating whether the command does anything.
            </summary>
            <remarks>
            Commands that have no effect are not stored in the undo history.
            </remarks>
        </member>
        <member name="M:MindFusion.Charting.Commands.DisposableCommand.#ctor(MindFusion.Charting.Commands.UndoManager)">
            <summary>
            Initializes a new instance of the DisposableCommand class.
            </summary>
            <param name="manager">
            The UndoManager that contains this command.
            </param>
        </member>
        <member name="M:MindFusion.Charting.Commands.DisposableCommand.Dispose">
            <summary>
            IDisposable.Dispose implementation.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.DisposableCommand.Clean">
            <summary>
            Disposes of this command.
            </summary>
            <remarks>
            This method is guaranteed to be invoked when the command is either
            disposed of or executed directly without subsequently disposed of.
            This method is guaranteed to be invoked only once, that is, if a
            command is executed and then disposed of, this method is invoked
            only once.
            This method is not automatically invoked when the command is cancelled
            (undone) to prevent cleaning when Undo is invoked by the undo manager.
            </remarks>
        </member>
        <member name="M:MindFusion.Charting.Commands.DisposableCommand.Execute">
            <summary>
            Command.Execute override.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.DisposableCommand.Cancel">
            <summary>
            Cancels the command.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.DisposableCommand.Undo">
            <summary>
            Command.Undo override.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.DisposableCommand.Redo">
            <summary>
            Command.Redo override.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.BarOverlayRenderer3D">
            <summary>
            A SeriesRenderer that draws a row of 3D bars for each series.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.BarOverlayRenderer">
            <summary>
            A SeriesRenderer that draws overlaying bars in its containing plot.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.BarOverlayRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the BarOverlayRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as overlaying bars.</param>
        </member>
        <member name="M:MindFusion.Charting.BarOverlayRenderer.BackToFrontRatio">
            <summary>
            Gets the ratio between widths of backmost and frontmost bars.
            </summary>
            <returns>3</returns>
        </member>
        <member name="M:MindFusion.Charting.BarOverlayRenderer.EnumVisibleOverlays(MindFusion.Charting.RenderContext,System.Boolean,MindFusion.Charting.BarOverlayRenderer.ProcessBars)">
            <summary>
            Enumerates the bars visible in current data range.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="frontToBack">true to enumerate from front bar to back bar, or false otherwise.</param>
            <param name="process">A ProcessBars callback.</param>
        </member>
        <member name="M:MindFusion.Charting.BarOverlayRenderer.MeasureDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            Renderer2D.MeasureDataRange override. Measures the data range of
            rendered series and assigns it to the associated Axis objects if
            their MinValue and MaxValue are not set.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.BarOverlayRenderer.AdjustDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.AdjustDataRange override. Adjusts the data range of associated
            Axis objects after initial measure pass.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.BarOverlayRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.BarOverlayRenderer.HitTest(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Renderer2D.HitTest override. Hit-tests the bar representations of data items.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a bar.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.BarOverlayRenderer.NearestElement(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Renderer2D.NearestElement override. Returns the data item closest to specified point.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a bar.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.BarOverlayRenderer.DrawHighlight(MindFusion.Charting.RenderContext,MindFusion.Charting.HitResult)">
            <summary>
            Renderer2D.DrawHighlight override. Draws highlighted bar in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="hitResult">A HitResult instance identifying highlighted data item.</param>
        </member>
        <member name="P:MindFusion.Charting.BarOverlayRenderer.HorizontalBars">
            <summary>
            Gets or sets a value indicating whether bars should be horizontal.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarOverlayRenderer.BarSpacingRatio">
            <summary>
            Gets or sets the ratio of empty space between adjacent bar groups to space occupied by bars.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarOverlayRenderer.StackOuterLabels">
            <summary>
            Gets or sets whether outer labels are displayed stacked on top of stacked bars,
            instead of showing them on the bar sides.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarOverlayRenderer.OuterLabelRotation">
            <summary>
            Gets or sets the rotation angle of outer labels. If not specified, labels
            are rotated at predefiend angles depending on bars' orientation and layout.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarOverlayRenderer.InnerLabelRotation">
            <summary>
            Gets or sets the rotation angle of inner labels. If not specified, labels
            are rotated at predefiend angles depending on bars' orientation and layout.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.BarOverlayRenderer.ProcessBars">
            <summary>
            Defines the signature of delegates called to process bars.
            </summary>
            <param name="seriesIndex">An integer index of series in Series list.</param>
            <param name="dataIndex">An integer index of data item in specified series.</param>
            <param name="bounds">A RectangleF representing the boundaries of current bar.</param>
            <param name="oppositeDirection">A flag specifying if bar is on negative side of Origin.</param>
        </member>
        <member name="M:MindFusion.Charting.BarOverlayRenderer3D.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the BarOverlayRenderer3D class.
            </summary>
            <param name="series">A list of Series that should be rendered as rows of bars.</param>
        </member>
        <member name="M:MindFusion.Charting.BarOverlayRenderer3D.BackToFrontRatio">
            <summary>
            BarOverlayRenderer.BackToFrontRatio override. Gets the ratio
            between widths of backmost and frontmost bars.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:MindFusion.Charting.BarOverlayRenderer3D.BuildModels(MindFusion.Charting.ThreeD.Scene3D,MindFusion.Charting.RenderContext)">
            <summary>
            Implements Renderer3D.BuildModels. Adds 3D bar models for the series data to specified scene.
            </summary>
            <param name="scene">A Scene3D instance.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="T:MindFusion.Charting.ThreeD.Polygon3D">
            <summary>
            Represents a polygon in 3D space.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.ThreeD.Projection">
            <summary>
            Defines the interface of 3D model projections.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Projection.DrawAsProjection(MindFusion.Charting.RenderContext)">
            <summary>
            Draws the projections in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Projection.ZSort">
            <summary>
            A value by which projections are sorted in depth buffer.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Polygon3D.#ctor">
            <summary>
            Initializes a new instance of the Polygon3D class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Polygon3D.#ctor(System.Collections.Generic.IEnumerable{MindFusion.Charting.Point3D},MindFusion.Drawing.Brush)">
            <summary>
            Initializes a new instance of the Polygon3D class.
            </summary>
            <param name="points">A list of 3D points.</param>
            <param name="brush">A Brush used to fill the polygon.</param>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Polygon3D.DrawAsProjection(MindFusion.Charting.RenderContext)">
            <summary>
            Draws this projection in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Polygon3D.Normal">
            <summary>
            Gets the polygon's normal vector.
            </summary>
            <returns>A Vector3D representing the polygon's normal vector.</returns>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Polygon3D.PointToPlaneDist(MindFusion.Charting.Point3D)">
            <summary>
            Gets the distance from specified point to polygon's plane.
            </summary>
            <param name="p">A Point3D instance.</param>
            <returns>A double value representing the distance.</returns>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Polygon3D.PointToPlaneDist(MindFusion.Charting.Point3D,MindFusion.Charting.Point3D,MindFusion.Charting.ThreeD.Vector3D)">
            <summary>
            Gets the distance from specified point to specified plane.
            </summary>
            <param name="p">A Point3D instance.</param>
            <param name="planePoint">A point from the plane.</param>
            <param name="planeNormal">The plane's normal vector.</param>
            <returns></returns>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Polygon3D.MidPoint">
            <summary>
            Returns the polygon's middle point.
            </summary>
            <returns>A Point3D instance representing the middle point.</returns>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Polygon3D.Points">
            <summary>
            Gets or sets the polygon's vertices.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Polygon3D.ZSort">
            <summary>
            A value by which projections are sorted in depth buffer.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.TextRenderer">
            <summary>
            Draws text and labels inside chart components.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.TextRenderer.#ctor(MindFusion.Charting.RenderContext,System.Drawing.Font,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the TextRenderer class.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="font">A System.Drawing.Font instance.</param>
            <param name="textBrush">A System.Drawing.Brush instance.</param>
        </member>
        <member name="M:MindFusion.Charting.TextRenderer.#ctor(MindFusion.Charting.RenderContext,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Brush,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the TextRenderer class.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="font">A System.Drawing.Font instance.</param>
            <param name="textBrush">A System.Drawing.Brush instance.</param>
            <param name="background">A System.Drawing.Brush instance.</param>
            <param name="borderPen">A System.Drawing.Pen instance.</param>
        </member>
        <member name="M:MindFusion.Charting.TextRenderer.DrawLabelAtPoint(MindFusion.Charting.Series,System.Int32,System.Drawing.PointF,MindFusion.Charting.LabelKinds)">
            <summary>
            Draws the specified label centered at specified location.
            </summary>
            <param name="series">A Series whose label to draw.</param>
            <param name="index">An integer index of the label.</param>
            <param name="point">A PointF specifying the label's location.</param>
            <param name="labelKind">A member of the LabelKinds enumeration.</param>
        </member>
        <member name="M:MindFusion.Charting.TextRenderer.DrawRightFromPoint(MindFusion.Charting.Series,System.Int32,System.Drawing.PointF,MindFusion.Charting.LabelKinds)">
            <summary>
            Draws the specified label on the right side of specified point.
            </summary>
            <param name="series">A Series whose label to draw.</param>
            <param name="index">An integer index of the label.</param>
            <param name="point">A PointF specifying the label's location.</param>
            <param name="labelKind">A member of the LabelKinds enumeration.</param>
        </member>
        <member name="M:MindFusion.Charting.TextRenderer.DrawLeftFromPoint(MindFusion.Charting.Series,System.Int32,System.Drawing.PointF,MindFusion.Charting.LabelKinds)">
            <summary>
            Draws the specified label on the left side of specified point.
            </summary>
            <param name="series">A Series whose label to draw.</param>
            <param name="index">An integer index of the label.</param>
            <param name="point">A PointF specifying the label's location.</param>
            <param name="labelKind">A member of the LabelKinds enumeration.</param>
        </member>
        <member name="M:MindFusion.Charting.TextRenderer.DrawRotatedLabelInRect(System.String,System.Drawing.RectangleF,System.Drawing.Brush,System.Drawing.StringAlignment,System.Drawing.StringAlignment)">
            <summary>
            Draws a 90-degree rotated text in specified layout rectangle.
            </summary>
            <param name="text">A string containing the text to draw.</param>
            <param name="bounds">A RectangleF specifying the layout rectangle.</param>
            <param name="textBrush">A System.Drawing.Brush instance.</param>
            <param name="alignment">A member of the StringAlignment enumeration.</param>
            <param name="lineAlignment">A member of the StringAlignment enumeration.</param>
        </member>
        <member name="M:MindFusion.Charting.TextRenderer.DrawRotatedLabelInRect(MindFusion.Charting.Series,System.Int32,System.Drawing.RectangleF,MindFusion.Charting.LabelKinds)">
            <summary>
            Draws the specified label rotated at 90 degrees in specified layout rectangle.
            </summary>
            <param name="series">A Series whose label to draw.</param>
            <param name="index">An integer index of the label.</param>
            <param name="bounds">A RectangleF specifying the layout rectangle.</param>
            <param name="labelKind">A member of the LabelKinds enumeration.</param>
        </member>
        <member name="M:MindFusion.Charting.TextRenderer.DrawLabelInRect(MindFusion.Charting.Series,System.Int32,System.Drawing.RectangleF,MindFusion.Charting.LabelKinds)">
            <summary>
            Draws the specified label in specified layout rectangle.
            </summary>
            <param name="series">A Series whose label to draw.</param>
            <param name="index">An integer index of the label.</param>
            <param name="bounds">A RectangleF specifying the layout rectangle.</param>
            <param name="labelKind">A member of the LabelKinds enumeration.</param>
        </member>
        <member name="M:MindFusion.Charting.TextRenderer.Dispose">
            <summary>
            Disposes the font and brush associated with this object.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.TextRenderer.LabelFont">
            <summary>
            Gets or sets the Font used to draw labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.TextRenderer.TextBrush">
            <summary>
            Gets or sets the System.Drawing.Brush used to draw labels.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.RenderContext">
            <summary>
            Provides contextual information about the dashboard to its child components
            when calling their draw, layout and user input methods.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.RenderContext.#ctor(MindFusion.Charting.RectD,MindFusion.Charting.Theme)">
            <summary>
            Initializes a new instance of the RenderContext clas.
            </summary>
            <param name="clipRect">A RectD specifying the clip rectangle.</param>
            <param name="theme">A Theme instance where appearance attributes should be derived from.</param>
        </member>
        <member name="M:MindFusion.Charting.RenderContext.GetXAxis(MindFusion.Charting.Renderer2D)">
            <summary>
            Gets the X axis assigned to a Renderer2D or returns one from parent plot or chart.
            </summary>
            <param name="series">A Renderer2D instance.</param>
            <returns>An Axis instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.RenderContext.GetYAxis(MindFusion.Charting.Renderer2D)">
            <summary>
            Gets the Y axis assigned to a Renderer2D or returns one from parent plot or chart.
            </summary>
            <param name="series">A Renderer2D instance.</param>
            <returns>An Axis instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.RenderContext.GetXAxis">
            <summary>
            Gets the X axis associated with parent plot or chart.
            </summary>
            <returns>An Axis instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.RenderContext.GetYAxis">
            <summary>
            Gets the Y axis associated with parent plot or chart.
            </summary>
            <returns>An Axis instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.RenderContext.GetClipRect(MindFusion.Charting.Components.Component)">
            <summary>
            Gets the clip rectangle relative to specified Component.
            </summary>
            <param name="relativeTo">A Component instance.</param>
            <returns>A RectD instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.RenderContext.GetClipRectF(MindFusion.Charting.Components.Component)">
            <summary>
            Gets the clip rectangle relative to specified Component.
            </summary>
            <param name="relativeTo">A Component instance.</param>
            <returns>A RectangleF instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.RenderContext.TextStyle(MindFusion.Charting.TextStyleHint)">
            <summary>
            Gets a TextStyle from current Theme.
            </summary>
            <param name="hint">A member of the TextStyleHint enumeration.</param>
            <returns>A TextStyle instance.</returns>
        </member>
        <member name="P:MindFusion.Charting.RenderContext.Graphics">
            <summary>
            Gets or sets the current drawing surface.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RenderContext.Component">
            <summary>
            Gets or sets the component currently being painted.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RenderContext.XAxis">
            <summary>
            Gets the chart's XAxis.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RenderContext.YAxis">
            <summary>
            Gets the chart's YAxis.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RenderContext.Theme">
            <summary>
            Gets or sets the Theme used to resolve appearance attributes.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RenderContext.DrawTooltip">
            <summary>
            Gets a value indicating whether tooltips will be drawn in this context.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Gauges.OvalGaugeController">
            <summary>
            Controls user interaction with oval gauges.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Gauges.OvalGaugeController.#ctor(MindFusion.Charting.Gauges.OvalGaugeRenderer,MindFusion.Charting.RenderContext)">
            <summary>
            Initializes a new instance of the OvalGaugeController class.
            </summary>
            <param name="r">An OvalGaugeRenderer instance controlled by this object.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.OvalGaugeController.OnMouseDown(System.Double,System.Double)">
            <summary>
            Implements ComponentController.OnMouseDown. Called when the user presses a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.OvalGaugeController.OnMouseMove(System.Double,System.Double)">
            <summary>
            Implements ComponentController.OnMouseMove. Called when the user moves the mouse.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.OvalGaugeController.OnMouseUp(System.Double,System.Double)">
            <summary>
            Implements ComponentController.OnMouseUp. Called when the user releases a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.OvalGaugeController.DrawInteraction(MindFusion.Drawing.IGraphics)">
            <summary>
            Implements ComponentController.DrawInteraction. Draws a representation
            of the current state of user interaction on specified IGraphics surface.
            </summary>
            <param name="graphics">An IGraphics instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.OvalGaugeController.GetRunningAnimation">
            <summary>
            For internal use.
            </summary>
            <returns>An instance of a ComponentAnimation -derived class.</returns>
        </member>
        <member name="M:MindFusion.Charting.Gauges.OvalGaugeController.GetCursorHint(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <returns>A member of the CursorHint enumeration.</returns>
        </member>
        <member name="P:MindFusion.Charting.Gauges.OvalGaugeController.Component">
            <summary>
            Implements ComponentController.Component. Gets the component modified by this controller.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Gauges.GaugeRenderer">
            <summary>
            A Component that renders gauges in the dashboard.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Gauges.GaugeRenderer.#ctor">
            <summary>
            Initializes a new instance of the GaugeRenderer class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Gauges.GaugeRenderer.GetDefaultPointerFill(MindFusion.Gauges.Pointer)">
            <summary>
            Gets the default pointer fill.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Gauges.GaugeRenderer.GetDefaultPointerStroke(MindFusion.Gauges.Pointer)">
            <summary>
            Gets the default pointer stroke.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.Background">
            <summary>
            Gets or sets a Brush used to draw the background of this gauge.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.Stroke">
            <summary>
            Gets or sets a Brush used to stroke this gauge.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.StrokeThickness">
            <summary>
            Gets or sets the thickness of the Pen used to stroke this gauge.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.ScaleBackground">
            <summary>
            Gets or sets a Brush used to draw the background of the gauge scales.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.ScaleStroke">
            <summary>
            Gets or sets a Brush used to stroke the gauge scales.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.ScaleStrokeThickness">
            <summary>
            Gets or sets the thickness of the Pen used to stroke the gauge scales.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.PointerBackground">
            <summary>
            Gets or sets a Brush used to draw the background of gauge pointers.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.PointerStroke">
            <summary>
            Gets or sets a Brush used to stroke gauge pointers.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.PointerStrokeThickness">
            <summary>
            Gets or sets the thickness of the Pen used to stroke the gauge pointers.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.TickBackground">
            <summary>
            Gets or sets a Brush used to draw the background of gauge ticks.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.TickStroke">
            <summary>
            Gets or sets a Brush used to stroke gauge ticks.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.TickStrokeThickness">
            <summary>
            Gets or sets the thickness of the Pen used to stroke gauge ticks.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.FontName">
            <summary>
            Gets or sets the name of font used to draw text in this gauge.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.FontStyle">
            <summary>
            Gets or sets the style of font used to draw text in this gauge.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Gauges.GaugeRenderer.FontSize">
            <summary>
            Gets or sets the size of font used to draw text in this gauge.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.FunctionSeries">
            <summary>
            Represents a series that calculates its values from provided formula.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Series">
            <summary>
            Specifies the interface that data providers should implement
            in order to feed data to SeriesRenderer classes.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Series.GetValue(System.Int32,System.Int32)">
            <summary>
            Returns a value for the specified data item in this series.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="dimension">An integer value specifying the dimension whose coordinate to return.</param>
            <returns>A double-precision number representing the value of a data item in the series.</returns>
        </member>
        <member name="M:MindFusion.Charting.Series.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            Returns a label for the specified data item in this series.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="M:MindFusion.Charting.Series.IsSorted(System.Int32)">
            <summary>
            Gets a value indicating whether the series values increase monotonously in specified dimension.
            </summary>
            <param name="dimension">An integer value identifying the dimension.</param>
            <returns>true if the values are sorted in specified dimension, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Series.IsEmphasized(System.Int32)">
            <summary>
            Gets a value indicating whether the specified data item should be emphasized by the SeriesRenderer.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <returns>true to emphasize the specified data item, or false otherwise.</returns>
        </member>
        <member name="P:MindFusion.Charting.Series.Size">
            <summary>
            Gets the number of data items in this series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series.Dimensions">
            <summary>
            Gets the number of values (coordinates) that can be returned by each data item.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series.Title">
            <summary>
            Gets the title of this series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series.SupportedLabels">
            <summary>
            Gets the kind of labels supported by this series.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.Series.DataChanged">
            <summary>
            Raised when the values in this series change.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.FunctionSeries.#ctor(System.String,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the FunctionSeries class.
            </summary>
            <param name="fxExpression">A string specifying a mathematical expression to evaluate.</param>
            <param name="size">An integer value specifying the number of values to calculate.</param>
            <param name="maxX">A double-precision number specifying the maximum value of function range.</param>
        </member>
        <member name="M:MindFusion.Charting.FunctionSeries.#ctor(System.String,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the FunctionSeries class.
            </summary>
            <param name="fxExpression">A string specifying a mathematical expression to evaluate.</param>
            <param name="size">An integer value specifying the number of values to calculate.</param>
            <param name="minX">A double-precision number specifying the minimum value of function range.</param>
            <param name="maxX">A double-precision number specifying the maximum value of function range.</param>
        </member>
        <member name="M:MindFusion.Charting.FunctionSeries.GetValue(System.Int32,System.Int32)">
            <summary>
            Implements Series.GetValue. Evaluates the function expression for specified index.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="dimension">An integer value specifying the dimension whose coordinate to return.</param>
            <returns>A double-precision number representing the value of a data item in the series.</returns>
        </member>
        <member name="M:MindFusion.Charting.FunctionSeries.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            Implements Series.GetLabel.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="M:MindFusion.Charting.FunctionSeries.IsSorted(System.Int32)">
            <summary>
            Implements Series.IsSorted.
            </summary>
            <param name="dimension">An integer value identifying the dimension.</param>
            <returns>true if the values are sorted in specified dimension, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.FunctionSeries.IsEmphasized(System.Int32)">
            <summary>
            Implements Series.IsEmphasized.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <returns>true to emphasize the specified data item, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.FunctionSeries.OnDataChanged">
            <summary>
            Raises the DataChanged event.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.FunctionSeries.Size">
            <summary>
            Implements Series.Size. Gets the number of data items in this series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.FunctionSeries.Dimensions">
            <summary>
            Implements Series.Dimensions. Returns 2.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.FunctionSeries.Title">
            <summary>
            Implements Series.Title. Gets or sets the title of this series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.FunctionSeries.SupportedLabels">
            <summary>
            Implements Series.SupportedLabels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.FunctionSeries.EvaluateFunctionDelegate">
            <summary>
            Gets or sets a delegate called to evaluate unknown functions used in the expression.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.FunctionSeries.DataChanged">
            <summary>
            Implements Series.DataChanged. Raised when the values in this series change.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.FunctionSeries.EvaluateFunction">
            <summary>
            Defines the signature of methods called to evaluate unknown functions used in the expression.
            </summary>
            <param name="name">A string value specifying function name.</param>
            <param name="arguments">A list of arguments passed to the function.</param>
            <returns>The value of function for specified arguments.</returns>
        </member>
        <member name="T:MindFusion.Charting.Components.BorderComponent">
            <summary>
            Represents a border UI component.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.BorderComponent.#ctor">
            <summary>
            Initializes a new instance of the BorderComponent class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.BorderComponent.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Measure override. Measures the desired size of this border and its Content.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.BorderComponent.Arrange(System.Double,System.Double,System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Arrange override. Sets the location and size of this border and arranges its Content.
            </summary>
            <param name="x">A double value specifying horizontal position.</param>
            <param name="y">A double value specifying vertical position.</param>
            <param name="w">A double value specifying the component's width.</param>
            <param name="h">A double value specifying the component's height.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.BorderComponent.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Component.Draw override. Draws this border in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.BorderComponent.Visit(MindFusion.Charting.Components.ComponentVisitor)">
            <summary>
            Implements the visitor design pattern.
            </summary>
            <param name="visitor">An instance of a ComponentVisitor -derived class.</param>
        </member>
        <member name="P:MindFusion.Charting.Components.BorderComponent.Content">
            <summary>
            Gets or sets the Component displayed inside this border.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.BorderComponent.Padding">
            <summary>
            Gets or sets the padding space between this border and its Content.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.BorderComponent.CornerRadiusTopLeft">
            <summary>
            Gets or sets the top-left corner radius.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.BorderComponent.CornerRadiusTopRight">
            <summary>
            Gets or sets the top-right corner radius.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.BorderComponent.CornerRadiusBottomLeft">
            <summary>
            Gets or sets the bottom-left corner radius.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.BorderComponent.CornerRadiusBottomRight">
            <summary>
            Gets or sets the bottom-right corner radius.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.BorderComponent.BorderThickness">
            <summary>
            Gets or sets the border thickness.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.BorderComponent.BorderBrush">
            <summary>
            Gets or sets the Brush used to draw the border outlines.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Commands.TrackChangesCommand">
            <summary>
            Represents a command that can track and undo changes of
            INotifyPropertyValueChanged objects.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.TrackChangesCommand.Undo">
            <summary>
            DisposableCommand.Undo override.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.TrackChangesCommand.Redo">
            <summary>
            DisposableCommand.Redo override.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.TrackChangesCommand.BeginChange">
            <summary>
            Called before undoing or redoing the command.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.TrackChangesCommand.EndChange">
            <summary>
            Called after undoing or redoing the command.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Commands.TrackChangesCommand.HasEffect">
            <summary>
            Command.HasEffect override.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.CandlestickSeriesStyle">
            <summary>
            Defines appearance attributes for candlestick charts.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.CandlestickSeriesStyle.#ctor(MindFusion.Drawing.Brush,MindFusion.Drawing.Brush,MindFusion.Drawing.Brush,System.Double,System.Drawing.Drawing2D.DashStyle,MindFusion.Charting.CandlestickRenderer)">
            <summary>
            Initializes a new instance of CandlestickSeriesStyle.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.CandlestickSeriesStyle.Fill(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.Fill. Returns a Brush instance, depending on the series data.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.CandlestickSeriesStyle.MindFusion#Charting#SeriesStyle#Stroke(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.Stroke.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.CandlestickSeriesStyle.MindFusion#Charting#SeriesStyle#StrokeThickness(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.StrokeThickness. 
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A nullable double value specifying stroke thickness.</returns>
        </member>
        <member name="M:MindFusion.Charting.CandlestickSeriesStyle.MindFusion#Charting#SeriesStyle#StrokeDashStyle(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.StrokeDashStyle.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A nullable DashStyle value specifying stroke dash style.</returns>
        </member>
        <member name="P:MindFusion.Charting.CandlestickSeriesStyle.RisingBrush">
            <summary>
            Gets or sets a Brush used to fill candlesticks, which open value is smaller or equal to its close value.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.CandlestickSeriesStyle.FallingBrush">
            <summary>
            Gets or sets a Brush used to fill candlesticks, which open value is greater than its close value.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.CandlestickSeriesStyle.Stroke">
            <summary>
            Gets or sets a Brush used to stroke candlesticks;
            </summary>
        </member>
        <member name="P:MindFusion.Charting.CandlestickSeriesStyle.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness of the candlesticks.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.CandlestickSeriesStyle.StrokeDashStyle">
            <summary>
            Gets or sets the stroke dash style of the candlesticks.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.XmlSeries">
            <summary>
            Represents a series whose data items are retrieved from an XML document.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlSeries.#ctor(System.Xml.XmlDocument,System.String)">
            <summary>
            Initializes a new instance of the XmlSeries class.
            </summary>
            <param name="document">An XmlDocument instance.</param>
            <param name="xDataXPath">
            An XPath string identifying data item coordinates in first dimension.
            </param>
        </member>
        <member name="M:MindFusion.Charting.XmlSeries.#ctor(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Initializes a new instance of the XmlSeries class.
            </summary>
            <param name="document">An XmlDocument instance.</param>
            <param name="xDataXPath">
            An XPath string identifying data item coordinates in first dimension.
            </param>
            <param name="yDataXPath">
            An XPath string identifying data item coordinates in second dimension.
            </param>
        </member>
        <member name="M:MindFusion.Charting.XmlSeries.#ctor(System.Xml.XmlDocument,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the XmlSeries class.
            </summary>
            <param name="document">An XmlDocument instance.</param>
            <param name="xDataXPath">
            An XPath string identifying data item coordinates in first dimension.
            </param>
            <param name="yDataXPath">
            An XPath string identifying data item coordinates in second dimension.
            </param>
            <param name="zDataXPath">
            An XPath string identifying data item coordinates in third dimension.
            </param>
            <param name="innerLabelsXPath">
            An XPath string identifying inner data labels.
            </param>
            <param name="outerLabelsXPath">
            An XPath string identifying outer data labels.
            </param>
            <param name="tooltipsXPath">
            An XPath string identifying tooltips.
            </param>
            <param name="xAxisLabelsXPath">
            An XPath string identifying X axis labels.
            </param>
            <param name="yAxisLabelsXPath">
            An XPath string identifying Y axis labels.
            </param>
            <param name="zAxisLabelsXPath">
            An XPath string identifying Z axis labels.
            </param>
        </member>
        <member name="M:MindFusion.Charting.XmlSeries.GetValue(System.Int32,System.Int32)">
            <summary>
            Implements Series.GetValue. Returns a value for the specified data item in the XML document.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="dimension">An integer value specifying the dimension whose coordinate to return.</param>
            <returns>A double-precision number representing the value of a data item in the XML document.</returns>
        </member>
        <member name="M:MindFusion.Charting.XmlSeries.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            Implements Series.GetLabel. Returns a label for the specified data item in the XML document.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="M:MindFusion.Charting.XmlSeries.IsEmphasized(System.Int32)">
            <summary>
            Implements Series.IsEmphasized. XmlSeries always returns false.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <returns>true to emphasize the specified data item, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.XmlSeries.IsSorted(System.Int32)">
            <summary>
            Implements Series.IsSorted. XmlSeries always returns false.
            </summary>
            <param name="dimension">An integer value identifying the dimension.</param>
            <returns>true if the values are sorted in specified dimension, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.XmlSeries.OnDataChanged">
            <summary>
            Raises the DataChanged event.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.XDataPath">
            <summary>
            Gets or sets the XPath expression identifying data coordinates in first dimension.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.YDataPath">
            <summary>
            Gets or sets the XPath expression identifying data coordinates in second dimension.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.ZDataPath">
            <summary>
            Gets or sets the XPath expression identifying data coordinates in third dimension.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.InnerLabelsPath">
            <summary>
            Gets or sets the XPath expression identifying inner data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.OuterLabelsPath">
            <summary>
            Gets or sets the XPath expression identifying outer data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.ToolTipsPath">
            <summary>
            Gets or sets the XPath expression identifying tooltips.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.XAxisLabelsPath">
            <summary>
            Gets or sets the XPath expression identifying X axis labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.YAxisLabelsPath">
            <summary>
            Gets or sets the XPath expression identifying Y axis labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.ZAxisLabelsPath">
            <summary>
            Gets or sets the XPath expression identifying Z axis labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.Size">
            <summary>
            Implements Series.Size. Gets the number of data items in the XML document.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.Dimensions">
            <summary>
            Implements Series.Dimensions. Returns the number of X/Y/ZDataPath properties set.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.Title">
            <summary>
            Implements Series.Title. Gets or sets the title of this series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlSeries.SupportedLabels">
            <summary>
            Implements Series.SupportedLabels. Result depends on which *LabelsPath properties are set.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.XmlSeries.DataChanged">
            <summary>
            Implements Series.DataChanged. Raised when the values in this series change.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.StepAreaRenderer">
            <summary>
            A SeriesRenderer that draws series as filled steps between data points.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.StepAreaRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the StepAreaRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered by this object.</param>
        </member>
        <member name="M:MindFusion.Charting.StepAreaRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="P:MindFusion.Charting.StepAreaRenderer.AreaOpacity">
            <summary>
            Gets or sets the opacity of radar polygons.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.RadarRenderer">
            <summary>
            A SeriesRenderer that draws series as polygons in polar coordinate system,
            where adjacent data points are at equal angular distances and radial
            coordinates correspond to magnitude of data item values.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.RadarRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the RadarRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered by this object.</param>
        </member>
        <member name="F:MindFusion.Charting.RadarRenderer.series">
            <summary>
            A list of Series that should be rendered by this RadarRenderer.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.RadarRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.RadarRenderer.EnumVisibleRanges(MindFusion.Charting.RenderContext,MindFusion.Charting.RadarRenderer.ProcessRange)">
            <summary>
            Enumerates each series once providing a list of all visible points at each iteration.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessRange callback.</param>
        </member>
        <member name="M:MindFusion.Charting.RadarRenderer.DrawHighlight(MindFusion.Charting.RenderContext,MindFusion.Charting.HitResult)">
            <summary>
            SeriesRenderer.DrawHighlight override. Draws highlighted data item in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="hitResult">A HitResult instance identifying highlighted data item.</param>
        </member>
        <member name="M:MindFusion.Charting.RadarRenderer.HitTest(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            SeriesRenderer.HitTest override. Hit-tests the visual representation of the series for a data item.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for data items.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.RadarRenderer.NearestElement(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            SeriesRenderer.NearestElement override. Returns the data item closest to specified point.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for data items.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.RadarRenderer.Data(System.Int32,System.Int32)">
            <summary>
            Returns the data value of specified series item.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this Renderer2D.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <returns>A double value.</returns>
        </member>
        <member name="M:MindFusion.Charting.RadarRenderer.MeasureDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.MeasureDataRange override. Measures the data range of
            rendered series and assigns it to the  associated Axis objects if
            their MinValue and MaxValue are not set.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.RadarRenderer.EnumSeries">
            <summary>
            Implement SeriesContainer.
            </summary>
            <returns>An instance of the IEnumerable&lt;Series&gt; class.</returns>
        </member>
        <member name="M:MindFusion.Charting.RadarRenderer.GetMinValue(System.Int32)">
            <summary>
            Gets the minimum value from all series located at specified index.
            </summary>
            <param name="index">An integer index of data element in the series.</param>
            <returns>A double value representing the smallest data element.</returns>
        </member>
        <member name="M:MindFusion.Charting.RadarRenderer.GetMaxValue(System.Int32)">
            <summary>
            Gets the maximum value from all series located at specified index.
            </summary>
            <param name="index">An integer index of data element in the series.</param>
            <returns>A double value representing the largest data element.</returns>
        </member>
        <member name="P:MindFusion.Charting.RadarRenderer.Series">
            <summary>
            Gets or sets a list of Series drawn by this RadarRenderer.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RadarRenderer.AreaOpacity">
            <summary>
            Gets or sets the opacity of radar polygons.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.RadarRenderer.ProcessRange">
            <summary>
            Defines the signature of delegates called to process all points from current data range at once.
            </summary>
            <param name="seriesIndex">An integer index of series in Series list.</param>
            <param name="points">
            A list of PointF values containing the plot coordinates
            corresponding to data items in currently visible range.
            </param>
        </member>
        <member name="T:MindFusion.Charting.PieSeries">
            <summary>
            Represents one-dimensional series defined by e list of data values and lists of
            inner and outer labels, convenient for providing data to PieRenderer.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.SimpleSeries">
            <summary>
            Represents one-dimensional series defined by e list of data values and a list of labels.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.SimpleSeries.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the SimpleSeries class.
            </summary>
            <param name="values">A list of data values.</param>
            <param name="labels">A list of labels.</param>
        </member>
        <member name="M:MindFusion.Charting.SimpleSeries.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the SimpleSeries class.
            </summary>
            <param name="values">A list of data values.</param>
            <param name="labels">A list of labels.</param>
            <param name="tooltips">A list of tooltips.</param>
        </member>
        <member name="M:MindFusion.Charting.SimpleSeries.GetValue(System.Int32,System.Int32)">
            <summary>
            Implements Series.GetValue. Returns a value for the specified data item in this series.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="dimension">An integer value specifying the dimension whose coordinate to return.</param>
            <returns>A double-precision number representing the value of a data item in the series.</returns>
        </member>
        <member name="M:MindFusion.Charting.SimpleSeries.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            Implements Series.GetLabel. Returns an element of the labels list.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="M:MindFusion.Charting.SimpleSeries.IsEmphasized(System.Int32)">
            <summary>
            Implements Series.IsEmphasized. Gets a value indicating whether
            the specified data item should be emphasized by the SeriesRenderer.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <returns>true to emphasize the specified data item, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.SimpleSeries.IsSorted(System.Int32)">
            <summary>
            Implements Series.IsSorted. SimpleSeries always returns false.
            </summary>
            <param name="dimension">An integer value identifying the dimension.</param>
            <returns>true if the values are sorted in specified dimension, or false otherwise.</returns>
        </member>
        <member name="F:MindFusion.Charting.SimpleSeries.labels">
            <summary>
            Contains the labels of data items.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.SimpleSeries.tooltips">
            <summary>
            Contains the tooltips of data items.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.SimpleSeries.emphasizedIndices">
            <summary>
            Contains the indices of emphasized data items.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.SimpleSeries.OnDataChanged">
            <summary>
            Raises the DataChanged event.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SimpleSeries.Size">
            <summary>
            Implements Series.Size. Returns the number of elements in Data list.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SimpleSeries.Dimensions">
            <summary>
            Implements Series.Dimensions. Returns 1.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SimpleSeries.SupportedLabels">
            <summary>
            Implements Series.SupportedLabels. Returns LabelKinds.InnerLabel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SimpleSeries.Title">
            <summary>
            Implements Series.Title. Gets or sets the title of this series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SimpleSeries.Data">
            <summary>
            Gets or sets the data values contained in this series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SimpleSeries.Labels">
            <summary>
            Gets or sets the data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.SimpleSeries.ToolTips">
            <summary>
            Gets or sets the tooltips corresponding to data values.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.SimpleSeries.DataChanged">
            <summary>
            Implements Series.DataChanged. Raised when the values in this series change.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PieSeries.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the PieSeries class.
            </summary>
            <param name="values">A list of data values.</param>
            <param name="innerLabels">A list of inner labels.</param>
            <param name="outerLabels">A list of outer labels.</param>
        </member>
        <member name="M:MindFusion.Charting.PieSeries.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            SimpleSeries.GetLabel override. Returns an element of the inner or outer label lists.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="P:MindFusion.Charting.PieSeries.SupportedLabels">
            <summary>
            Implements Series.SupportedLabels. Returns a combination of InnerLabel and OuterLabel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PieSeries.OuterLabels">
            <summary>
            Gets or sets the outer labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PieSeries.InnerLabels">
            <summary>
            Gets or sets the inner labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PieSeries.DetachedSlices">
            <summary>
            Gets or sets indices of emphasized data items. PieRenderer draws
            their corresponding slices as pulled out of the pie.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.HitResult">
            <summary>
            Represents the result of a hit-test operation.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.HitResult.#ctor(MindFusion.Charting.SeriesRenderer,System.Int32,System.Double,MindFusion.Charting.Series)">
            <summary>
            Initializes a new instance of the HitResult class.
            </summary>
            <param name="renderer">A SeriesRenderer whose data item has been hit.</param>
            <param name="index">An integer index of the data item.</param>
            <param name="value">The item's vaue.</param>
            <param name="series">The Series that contains the found item.</param>
        </member>
        <member name="P:MindFusion.Charting.HitResult.Plot">
            <summary>
            Gets the Plot that has been hit.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.HitResult.Renderer">
            <summary>
            Gets the SeriesRenderer that has been hit.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.HitResult.Index">
            <summary>
            Gets the data item index within its Series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.HitResult.Value">
            <summary>
            Gets the data item value.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.HitResult.Series">
            <summary>
            Gets the Series that has been hit.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.HitResult.Distance">
            <summary>
            Gets the distance to data item that has been hit.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.DateTimeSeries">
            <summary>
            Represents a series that contains DateTime values
            as X coordinates and double values as Y coordinates.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.DateTimeSeries.#ctor(System.Collections.Generic.IList{System.DateTime},System.Collections.Generic.IList{System.Double},System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the DateTimeSeries class.
            </summary>
            <param name="dates">A list of DateTime values.</param>
            <param name="values">A list of double values.</param>
            <param name="minDate">Identifies the start of the time range.</param>
            <param name="maxDate">Identifies the end of the time range.</param>
        </member>
        <member name="M:MindFusion.Charting.DateTimeSeries.GetValue(System.Int32,System.Int32)">
            <summary>
            Implements Series.GetValue. Returns a value for the specified data item in this series.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="dimension">An integer value specifying the dimension whose coordinate to return.</param>
            <returns>A double-precision number representing the value of a data item in the series.</returns>
        </member>
        <member name="M:MindFusion.Charting.DateTimeSeries.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            Implements Series.GetLabel. Returns DateTime value at specified index as an XAxisLabel.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="M:MindFusion.Charting.DateTimeSeries.IsSorted(System.Int32)">
            <summary>
            Implements Series.IsSorted. DateTimeSeries always returns false.
            </summary>
            <param name="dimension">An integer value identifying the dimension.</param>
            <returns>true if the values are sorted in specified dimension, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.DateTimeSeries.IsEmphasized(System.Int32)">
            <summary>
            Implements Series.IsEmphasized. DateTimeSeries always returns false.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <returns>true to emphasize the specified data item, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.DateTimeSeries.OnDataChanged">
            <summary>
            Raises the DataChanged event.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.Size">
            <summary>
            Implements Series.Size. Returns the number of elements provided in DateTime list.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.Dimensions">
            <summary>
            Implements Series.Dimensions. Returns 2.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.Title">
            <summary>
            Implements Series.Title. Gets or sets the title of this series.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.DateTimeSeries.DataChanged">
            <summary>
            Implements Series.DataChanged. Raised when the values in this series change.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.SupportedLabels">
            <summary>
            Implements Series.SupportedLabels. Returns LabelKinds.XAxisLabel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.Dates">
            <summary>
            Gets or sets a list of DateTime values used as X coordinates of this series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.MinValue">
            <summary>
            Gets or sets the coordinate corresponding to MinDate.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.MaxValue">
            <summary>
            Gets or sets the coordinate corresponding to MaxDate.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.MinDate">
            <summary>
            Gets or sets the start of the time range.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.MaxDate">
            <summary>
            Gets or sets the end of the time range.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.DateTimeFormat">
            <summary>
            Gets or sets a value indicating how to format DateTime values as labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.CustomDateTimeFormat">
            <summary>
            Gets or sets a custom format string for DateTime labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.LabelPrefix">
            <summary>
            Gets or sets a prefix added in front of formatted DateTime labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DateTimeSeries.LabelSuffix">
            <summary>
            Gets or sets a suffix appended to formatted DateTime labels.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.ButtonDrawEventArgs">
            <summary>
            Contains arguments passed to the CustomDraw event of buttons.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.ButtonDrawEventArgs.Graphics">
            <summary>
            Gets the IGraphics surface where the event handler should draw.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.ButtonDrawEventArgs.ClipBounds">
            <summary>
            Gets the current clip rectangle.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.ButtonComponent">
            <summary>
            Represents a button UI component.
            </summary>
            <summary>
            Represents a button UI component.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.ButtonComponent.#ctor">
            <summary>
            Initializes a new instance of the ButtonComponent class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.ButtonComponent.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Measure override. Measures the desired size of this button.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.ButtonComponent.Arrange(System.Double,System.Double,System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Arrange override. Sets the location and size of this button relatively to its parent.
            </summary>
            <param name="x">A double value specifying horizontal position.</param>
            <param name="y">A double value specifying vertical position.</param>
            <param name="w">A double value specifying the component's width.</param>
            <param name="h">A double value specifying the component's height.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.ButtonComponent.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Component.Draw override. Draws this button in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.ButtonComponent.CreateController(MindFusion.Charting.RenderContext)">
            <summary>
            Component.CreateController override. Returns a controller used to interact with this button.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>Instance of a ComponentController -derived class.</returns>
        </member>
        <member name="M:MindFusion.Charting.Components.ButtonComponent.OnClicked(System.EventArgs)">
            <summary>
            Raises the Clicked event.
            </summary>
            <param name="e">An instance of the EventArgs class.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.ButtonComponent.OnCustomDraw(MindFusion.Charting.Components.ButtonDrawEventArgs)">
            <summary>
            Raises the CustomDraw event.
            </summary>
            <param name="e">An instance of the ButtonDrawEventArgs class.</param>
        </member>
        <member name="P:MindFusion.Charting.Components.ButtonComponent.Content">
            <summary>
            Gets or sets the content displayed inside this button.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.ButtonComponent.Padding">
            <summary>
            Gets or sets the padding space between button's content and its borders.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.Components.ButtonComponent.Clicked">
            <summary>
            Raised when the user clicks on this button.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.Components.ButtonComponent.CustomDraw">
            <summary>
            Raised to let you custom-draw button graphics.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.ButtonComponent.Controller.GetCursorHint(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <returns>A member of the CursorHint enumeration.</returns>
        </member>
        <member name="T:MindFusion.Charting.AxisZoomController">
            <summary>
            Represents a controller that zooms into axis' data range.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.AxisZoomController.#ctor(MindFusion.Charting.RenderContext,System.Boolean)">
            <summary>
            Initializes a new instance of the AxisZoomController class.
            </summary>
            <param name="renderContext">A RenderContext instance.</param>
            <param name="vertical">
            true to implement interaction along the Y axis, or false for the X axis.
            </param>
        </member>
        <member name="M:MindFusion.Charting.AxisZoomController.OnMouseDown(System.Double,System.Double)">
            <summary>
            Called when the user presses a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.AxisZoomController.OnMouseMove(System.Double,System.Double)">
            <summary>
            Called when the user moves the mouse.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.AxisZoomController.OnMouseUp(System.Double,System.Double)">
            <summary>
            Called when the user releases a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.AxisZoomController.DrawInteraction(MindFusion.Drawing.IGraphics)">
            <summary>
            Draws the currently selected data range that that controller will zoom into when the user releases
            the mouse button.
            </summary>
            <param name="graphics">An IGraphics instance.</param>
        </member>
        <member name="M:MindFusion.Charting.AxisZoomController.GetRunningAnimation">
            <summary>
            For internal use.
            </summary>
            <returns>An instance of a ComponentAnimation -derived class.</returns>
        </member>
        <member name="M:MindFusion.Charting.AxisZoomController.GetCursorHint(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <returns>A member of the CursorHint enumeration.</returns>
        </member>
        <member name="F:MindFusion.Charting.AxisZoomController.renderContext">
            <summary>
            The current RenderContext.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisZoomController.Vertical">
            <summary>
            Gets or sets a value indicating whether interaction is done along the X or Y axis.
            </summary>
            <value>
            true to implement interaction along the Y axis, or false for the X axis.
            </value>
        </member>
        <member name="P:MindFusion.Charting.AxisZoomController.Component">
            <summary>
            Gets the component controlled by this AxisZoomController.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.ToolTip">
            <summary>
            Represents current tooltip.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ToolTip.Text">
            <summary>
            Gets or sets the tooltip text.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ToolTip.Position">
            <summary>
            Gets or sets the tooltip position.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ToolTip.HorizontalPadding">
             <summary>
             Gets or sets the horizontal padding to the left and right of the tooltip text.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ToolTip.VerticalPadding">
             <summary>
             Gets or sets the vertical padding above and below the tooltip text.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ToolTip.HorizontalOffset">
             <summary>
             Gets or sets the horizontal offset from the pointer.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ToolTip.VerticalOffset">
             <summary>
             Gets or sets the vertical offset from the pointer.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ToolTip.Font">
             <summary>
             Gets or sets the tooltip font.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ToolTip.Brush">
             <summary>
             Gets or sets the tooltip background brush.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ToolTip.Pen">
             <summary>
             Gets or sets the tooltip border pen.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ToolTip.TextBrush">
             <summary>
             Gets or sets the tooltip text brush.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.TextStyleHint">
            <summary>
            Identifies text styles that can be accessed through RenderContent.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.TextStyleHint.Title">
            <summary>
            Identifies style used to draw chart's title.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.TextStyleHint.Subtitle">
            <summary>
            Identifies style used to draw chart's sub-title.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.TextStyleHint.AxisLabels">
            <summary>
            Identifies style used to draw axis labels.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.TextStyleHint.AxisTitle">
            <summary>
            Identifies style used to draw axis title.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.TextStyleHint.DataLabels">
            <summary>
            Identifies style used to draw data labels.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.TextStyleHint.Widget">
            <summary>
            Identifies style used to draw text in UI widgets.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.TextStyleHint.LegendTitle">
            <summary>
            Identifies style used to draw legend title.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.RadarGridType">
            <summary>
            Identifies the grid types supported by RadarPlot.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.RadarGridType.Spiderweb">
            <summary>
            Identifies spider-web grid consisting as concentric regular polygons.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.RadarGridType.Radar">
            <summary>
            Identifies radar grid consisting as concentric circles.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.PointSeries3D">
            <summary>
            Represents a data series defined by a list of Point3D objects.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PointSeries3D.#ctor(System.Collections.Generic.IList{MindFusion.Charting.Point3D},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the PointSeries3D class.
            </summary>
            <param name="points">A list of 3D points.</param>
            <param name="labels">A list of labels.</param>
        </member>
        <member name="M:MindFusion.Charting.PointSeries3D.GetValue(System.Int32,System.Int32)">
            <summary>
            Implements Series.GetValue. Returns a coordinate of specified point in this series.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="dimension">An integer value specifying the dimension whose coordinate to return.</param>
            <returns>A double-precision number representing the value of a data item in the series.</returns>
        </member>
        <member name="M:MindFusion.Charting.PointSeries3D.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            Implements Series.GetLabel. Returns an element of the Labels list.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="M:MindFusion.Charting.PointSeries3D.IsEmphasized(System.Int32)">
            <summary>
            Implements Series.IsEmphasized. PointSeries3D always returns false.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <returns>true to emphasize the specified data item, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.PointSeries3D.IsSorted(System.Int32)">
            <summary>
            Implements Series.IsSorted. PointSeries3D always returns false.
            </summary>
            <param name="dimension">An integer value identifying the dimension.</param>
            <returns>true if the values are sorted in specified dimension, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.PointSeries3D.OnDataChanged">
            <summary>
            Raises the DataChanged event.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PointSeries3D.Size">
            <summary>
            Implements Series.Size. Returns the number of elements in Points list.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PointSeries3D.Dimensions">
            <summary>
            Implements Series.Dimensions. Returns 3.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PointSeries3D.SupportedLabels">
            <summary>
            Implements Series.SupportedLabels. Returns InnerLabel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PointSeries3D.Points">
            <summary>
            Gets or sets the series' points.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PointSeries3D.Labels">
            <summary>
            Gets or sets the data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PointSeries3D.Title">
            <summary>
            Implements Series.Title. Gets or sets the title of this series.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.PointSeries3D.DataChanged">
            <summary>
            Implements Series.DataChanged. Raised when the values in this series change.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.PerElementSeriesStyle">
            <summary>
            Implements SeriesStyle using different attributes for each data item.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PerElementSeriesStyle.#ctor">
            <summary>
            Initializes a new instance of PerElementSeriesStyle.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PerElementSeriesStyle.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{MindFusion.Drawing.Brush}},System.Collections.Generic.List{System.Collections.Generic.List{MindFusion.Drawing.Brush}},System.Collections.Generic.List{System.Collections.Generic.List{System.Double}},System.Collections.Generic.List{System.Collections.Generic.List{System.Drawing.Drawing2D.DashStyle}})">
            <summary>
            Initializes a new instance of PerElementSeriesStyle.
            </summary>
            <param name="fills">
            A list of Brush lists, each list used to draw a different series,
            and each Brush used to fill individual elements of a series. 
            </param>
            <param name="strokes">
            A list of Brush lists, each list used to stroke a different series,
            and each Brush used to stroke individual elements of a series.
            </param>
            <param name="strokeThicknesses">
            A list of double lists, each list used to stroke a different series,
            and each double value specifying thickness of individual elements of a series.
            </param>
            <param name="strokeDashStyles">
            A list of DashStyle lists, each list used to stroke a different series,
            and each DashStyle value specifying style of individual elements of a series.
            </param>
        </member>
        <member name="M:MindFusion.Charting.PerElementSeriesStyle.Fill(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.Fill. Returns a Brush from the Fills list
            that matches specified series and data indices.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.PerElementSeriesStyle.Stroke(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.Stroke. Returns a Brush from the Strokes list
            that matches specified series and data indices.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.PerElementSeriesStyle.StrokeThickness(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.StrokeThickness. Returns a value from
            the StrokeThicknesses list that matches specified series and data indices.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A nullable double value specifying stroke thickness.</returns>
        </member>
        <member name="M:MindFusion.Charting.PerElementSeriesStyle.StrokeDashStyle(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.StrokeDashStyle. Returns a value from
            the StrokeDashStyles list that matches specified series and data indices.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A nullable DashStyle value specifying stroke dash style.</returns>
        </member>
        <member name="P:MindFusion.Charting.PerElementSeriesStyle.Fills">
            <summary>
            Gets or sets a list of Brush lists, each list used to draw a different series,
            and each Brush used to fill individual elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PerElementSeriesStyle.Strokes">
            <summary>
            Gets or sets a list of Brush lists, each list used to stroke a different series,
            and each Brush used to stroke individual elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PerElementSeriesStyle.StrokeThicknesses">
            <summary>
            Gets or sets a list of double lists, each list used to stroke a different series,
            and each double value specifying thickness of individual elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PerElementSeriesStyle.StrokeDashStyles">
            <summary>
            Gets or sets a list of DashStyle lists, each list used to stroke a different series,
            and each DashStyle value specifying style of individual elements of a series.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.PieRenderer">
            <summary>
            A SeriesRenderer that draws pies in its containing plot.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PieRenderer.#ctor(MindFusion.Charting.Series)">
            <summary>
            Initializes a new instance of the PieRenderer class.
            </summary>
            <param name="series">The Series that should be rendered as a pie.</param>
        </member>
        <member name="M:MindFusion.Charting.PieRenderer.#ctor(MindFusion.Charting.Series,System.Int32)">
            <summary>
            Initializes a new instance of the PieRenderer class.
            </summary>
            <param name="series">The Series that should be rendered as a pie.</param>
            <param name="dimension">Specifies the Series dimension index that should be used to access data.</param>
        </member>
        <member name="M:MindFusion.Charting.PieRenderer.EnumSlices(MindFusion.Charting.RenderContext,MindFusion.Charting.PieRenderer.ProcessSlice)">
            <summary>
            Enumerates the slices of the pie.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessBars callback.</param>
        </member>
        <member name="M:MindFusion.Charting.PieRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.PieRenderer.DrawHighlight(MindFusion.Charting.RenderContext,MindFusion.Charting.HitResult)">
            <summary>
            SeriesRenderer.DrawHighlight override. Draws highlighted slice in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="hitResult">A HitResult instance identifying highlighted data item.</param>
        </member>
        <member name="M:MindFusion.Charting.PieRenderer.HitTest(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            SeriesRenderer.HitTest override. Hit-tests the slices representing data items.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a pie slice.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.PieRenderer.NearestElement(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            SeriesRenderer.NearestElement override. Returns the data item closest to specified point.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a pie slice.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.PieRenderer.EnumSeries">
            <summary>
            Implements the SeriesContainer interface.
            </summary>
            <returns>An instance of the IEnumerable&lt;Series&gt; class.</returns>
        </member>
        <member name="P:MindFusion.Charting.PieRenderer.Series">
            <summary>
            Gets or sets the Series drawn by this PieRenderer.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PieRenderer.DetachOffset">
            <summary>
            Gets or sets the percentage by which detached slices are offset from pie center.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PieRenderer.Doughnut">
            <summary>
            Gets or sets a value indicating whether the pie should be rendered as a doughnut.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PieRenderer.Dimension">
            <summary>
            Gets or sets the dimension index that should be used to read data from the Series.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.PieRenderer.ProcessSlice">
            <summary>
            Defines the signature of delegates called to process pie slices.
            </summary>
            <param name="dataIndex">An integer index of data item in Series.</param>
            <param name="rect">The bounding rectangle of the slice' circle.</param>
            <param name="diameter">The diameter of the pie.</param>
            <param name="startAngle">The start angle of the slice' sector.</param>
            <param name="sweepAngle">The sweep angle of the slice' sector.</param>
            <param name="path">A GraphicsPath representing the slice.</param>
        </member>
        <member name="T:MindFusion.Charting.GridType">
            <summary>
            Indicates Plot2D grid type.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.GridType.None">
            <summary>
            Do not draw grid.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.GridType.Horizontal">
            <summary>
            Draw horizontal stripes.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.GridType.Vertical">
            <summary>
            Draw vertical stripes.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.GridType.Crossed">
            <summary>
            Draw crossed stripes.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.RectD">
            <summary>
            Represents a rectangle with double-precision coordinates.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.RectD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the RectD struct.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="width">Rectangle's width.</param>
            <param name="height">Rectangle's height.</param>
        </member>
        <member name="M:MindFusion.Charting.RectD.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the RectD struct.
            </summary>
            <param name="rect">A Rectangle whose location and size to copy.</param>
        </member>
        <member name="M:MindFusion.Charting.RectD.ToString">
            <summary>
            Object.ToString override.
            </summary>
            <returns>A string representation of this rectangle.</returns>
        </member>
        <member name="M:MindFusion.Charting.RectD.Intersects(MindFusion.Charting.RectD)">
            <summary>
            Checks whether this rectangle intersects with specified rectangle.
            </summary>
            <param name="other">A RectD instance.</param>
            <returns>true if the rectangles intersect, or false otherwise.</returns>
        </member>
        <member name="P:MindFusion.Charting.RectD.X">
            <summary>
            Gets or sets X coordinate of this rectangle.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RectD.Y">
            <summary>
            Gets or sets Y coordinate of this rectangle.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RectD.Width">
            <summary>
            Gets or sets the width of this rectangle.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RectD.Height">
            <summary>
            Gets or sets the height of this rectangle.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RectD.Left">
            <summary>
            Gets the rectangle's left side.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RectD.Right">
            <summary>
            Gets the rectangle's right side.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RectD.Top">
            <summary>
            Gets the rectangle's top side.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RectD.Bottom">
            <summary>
            Gets the rectangle's bottom side.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RectD.Location">
            <summary>
            Gets the rectangle's location.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.RootControl">
            <summary>
            Interface used to communicate with .NET host contol.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.RootControl.Invalidate(MindFusion.Charting.RectD,MindFusion.Charting.Components.Component)">
            <summary>
            Invalidates the specified region of a component.
            </summary>
            <param name="rect">The area to invalidate and redraw.</param>
            <param name="panel">The reference Component.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.RootControl.InvalidateLayout(MindFusion.Charting.Components.Component)">
            <summary>
            Invalidates layout of specified component.
            </summary>
            <param name="panel">The component to invalidate.</param>
        </member>
        <member name="T:MindFusion.Charting.Components.GridPanel">
            <summary>
            Represents a layout panel that arranges its child components in a grid.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.Panel">
            <summary>
            Represents a component that contains multiple child components and manages their layout.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.Panel.#ctor">
            <summary>
            Initializes a new instance of the Panel class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.Panel.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Component.Draw override. Draws child components in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.Panel.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Measure override. Measures the desired size of this panel and its child components.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.Panel.Visit(MindFusion.Charting.Components.ComponentVisitor)">
            <summary>
            Component.Visit override. Implements the visitor design pattern.
            </summary>
            <param name="visitor">An instance of a ComponentVisitor -derived class.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.Panel.HitTest(System.Double,System.Double)">
            <summary>
            Component.HitTest override. Returns the component containing specified point.
            </summary>
            <param name="x">X coordinate of the point to test.</param>
            <param name="y">Y coordinate of the point to test.</param>
            <returns>A Component instance if one contains the point, or null otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Components.Panel.Invalidate(MindFusion.Charting.RectD)">
            <summary>
            Component.Invalidate override. Invalidates the appearance
            of this panel and calls its Draw method at next draw operation.
            </summary>
            <param name="rect">A RectD instance specifying the invalid rectangle.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.Panel.InvalidateLayout">
            <summary>
            Component.InvalidateLayout override. Invalidates the current layout
            and runs a new layout pass before next draw operation.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Panel.Children">
            <summary>
            Gets the list of child components of this panel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.Panel.ParentControl">
            <summary>
            Gets or sets a reference to the control containing this panel.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.GridPanel.#ctor">
            <summary>
            Initializes a new instance of the GridPanel class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.GridPanel.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Panel.Measure override. Measures the desired size of this panel and its child components.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.GridPanel.Arrange(System.Double,System.Double,System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Arrange override. Sets the location and size
            of this panel and arranges its child components.
            </summary>
            <param name="x">A double value specifying horizontal position.</param>
            <param name="y">A double value specifying vertical position.</param>
            <param name="w">A double value specifying the component's width.</param>
            <param name="h">A double value specifying the component's height.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="P:MindFusion.Charting.Components.GridPanel.Rows">
            <summary>
            Gets or sets a list of GridRow objects specifying row attributes.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.GridPanel.Columns">
            <summary>
            Gets or sets a list of GridColumn objects specifying column attributes.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Commands.UndoEventArgs">
            <summary>
            Contains the arguments passed to the ActionUndone and ActionRedone event handlers.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.UndoEventArgs.#ctor(MindFusion.Charting.Commands.Command)">
            <summary>
            Initializes a new instance of the UndoEventArgs class.
            </summary>
            <param name="command">
            The Command related to the event.
            </param>
        </member>
        <member name="P:MindFusion.Charting.Commands.UndoEventArgs.Command">
            <summary>
            Gets a reference to the Command instance related to the event being handled.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Commands.CompositeCommand">
            <summary>
            Represents a set of Command instances as a single operation.
            Undoing or redoing the composite action, respectively undoes or
            redoes all its constituent subactions at the same time.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.CompositeCommand.#ctor(MindFusion.Charting.Commands.UndoManager)">
            <summary>
            Initializes a new instance of the CompositeCommand class.
            </summary>
            <param name="manager">
            The UndoManager that contains this command.
            </param>
            <remarks>
            Composite commands cannot be instantiated directly by clients.
            They must be created through Workbook.StartCompositeOperation.
            </remarks>
        </member>
        <member name="M:MindFusion.Charting.Commands.CompositeCommand.Execute">
            <summary>
            DisposableCommand.Execute override.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.CompositeCommand.Undo">
            <summary>
            Command.Undo override.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Commands.CompositeCommand.Redo">
            <summary>
            Command.Redo override.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Commands.CompositeCommand.Commands">
            <summary>
            Gets a list containing the child Command objects.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.AxisRenderer">
            <summary>
            A base class for components that render Axis ranges.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.AxisRenderer.#ctor(MindFusion.Charting.Axis)">
            <summary>
            Initializes a new instance of the AxisRenderer class.
            </summary>
            <param name="axis">The Axis that will be drawn by this object.</param>
        </member>
        <member name="M:MindFusion.Charting.AxisRenderer.EffectiveAxis(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the effective Axis in current context, getting one from Plot2D
            or chart control if there's no local Axis associated with this renderer.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>An Axis instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.AxisRenderer.EffectiveLabelFont(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Font that should be used to draw axis labels.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A System.Drawing.Font instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.AxisRenderer.EffectiveLabelBrush(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Brush that should be used to draw axis labels.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A System.Drawing.Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.AxisRenderer.EffectiveTitleFont(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Font that should be used to draw the axis Title.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A System.Drawing.Font instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.AxisRenderer.EffectiveTitleBrush(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Brush that should be used to draw the axis Title.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A System.Drawing.Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.AxisRenderer.EffectivePen(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Pen that should be used to draw axis lines.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A System.Drawing.Pen instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.AxisRenderer.EffectiveAxisStroke(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Brush that should be used to stroke axis lines.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.AxisRenderer.EffectiveAxisStrokeThickness(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the thickness of axis line strokes.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A double value.</returns>
        </member>
        <member name="M:MindFusion.Charting.AxisRenderer.EffectiveAxisDashStyle(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the dash style of axis line strokes.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A member of the DashStyle enumeration.</returns>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.Axis">
            <summary>
            The Axis that will be drawn by this object.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.PinLabels">
            <summary>
            Gets or sets a value indicating whether coordinate labels should be pinned
            in place or scroll together with the plot when users pan it.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.LabelsSource">
            <summary>
            Gets or sets the object whose Series labels should be rendered along this axis.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.ShowCoordinates">
            <summary>
            Gets or sets a value indicating whether this AxisRenderer should draw axis coordinates.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.ShowSeriesLabels">
            <summary>
            Gets or sets a value indicating whether this AxisRenderer should draw data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.ShowTicks">
            <summary>
            Gets or sets a value indicating whether this AxisRenderer should draw axis ticks.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.TickLength">
            <summary>
            Gets or sets the length of the axis ticks.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.LabelRotationAngle">
            <summary>
            Gets or sets the rotation angle of data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.LabelBrush">
            <summary>
            Gets or sets the Brush that should be used to draw axis labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.LabelFontName">
            <summary>
            Gets or sets the name of font that should be used to draw axis labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.LabelFontSize">
            <summary>
            Gets or sets the size of font that should be used to draw axis labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.LabelFontStyle">
            <summary>
            Gets or sets the style of font that should be used to draw axis labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.LabelPadding">
            <summary>
            Gets or sets the padding space between the axis line and coordinate labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.TitleBrush">
            <summary>
            Gets or sets the Brush that should be used to draw the axis Title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.TitleFontName">
            <summary>
            Gets or sets the name of font that should be used to draw the axis Title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.TitleFontSize">
            <summary>
            Gets or sets the size of font that should be used to draw the axis Title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.TitleFontStyle">
            <summary>
            Gets or sets the style of font that should be used to draw the axis Title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.AxisStroke">
            <summary>
            Gets or sets the Brush that should be used to draw axis lines.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.AxisStrokeThickness">
            <summary>
            Gets or sets the thickness axis lines should be stroked with.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.AxisRenderer.AxisStrokeDashStyle">
            <summary>
            Gets or sets the dash style axis lines should be stroked with.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.AreaStackRenderer">
            <summary>
            A SeriesRenderer that draws stacked areas in its containing plot.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.StackRenderer">
            <summary>
            A base SeriesRenderer for stacked graphics.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.StackRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the StackRenderer class.
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:MindFusion.Charting.StackRenderer.EnumVisibleStackPoints(MindFusion.Charting.RenderContext,MindFusion.Charting.StackRenderer.ProcessStackPoint)">
            <summary>
            Enumerates the data values of rendered series mapped to plot 2D coordinates.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessStackPoint callback.</param>
        </member>
        <member name="M:MindFusion.Charting.StackRenderer.EnumVisibleStackPointsRelativeTo(MindFusion.Charting.RenderContext,System.Nullable{System.Double},MindFusion.Charting.StackRenderer.ProcessStackPoint)">
            <summary>
            Enumerates the data values of rendered series mapped to plot 2D coordinates.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="origin">A double value specifying axis origin.</param>
            <param name="process">A ProcessStackPoint callback.</param>
        </member>
        <member name="M:MindFusion.Charting.StackRenderer.EnumVisibleStackRanges(MindFusion.Charting.RenderContext,MindFusion.Charting.StackRenderer.ProcessStackRange)">
            <summary>
            Enumerates each series once providing a list of all visible points at each iteration.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessStackRange callback.</param>
        </member>
        <member name="M:MindFusion.Charting.StackRenderer.EnumVisibleStackRangesRelativeTo(MindFusion.Charting.RenderContext,System.Nullable{System.Double},MindFusion.Charting.StackRenderer.ProcessStackRange)">
            <summary>
            Enumerates each series once providing a list of all visible points at each iteration.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="origin">A double value specifying axis origin.</param>
            <param name="process">A ProcessStackRange callback.</param>
        </member>
        <member name="M:MindFusion.Charting.StackRenderer.GetPixel(System.Int32,System.Int32,MindFusion.Charting.Axis,MindFusion.Charting.Axis,MindFusion.Charting.Components.Component)">
            <summary>
            Gets the coordinates of specified data item when mapped to a Plot2D pixel.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this Renderer2D.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <param name="xAxis">An Axis reference specifying the X axis.</param>
            <param name="yAxis">An Axis reference specifying the Y axis.</param>
            <param name="component">An instance of Plot2D or derived class.</param>
            <returns>A PointF containing Plot2D coordinates corresponding to specified data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.StackRenderer.MeasureDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            Renderer2D.MeasureDataRange override. Measures the data range of
            rendered series and assigns it to the associated Axis objects if
            their MinValue and MaxValue are not set.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.StackRenderer.MeasureDataRangeRelativeTo(MindFusion.Charting.RenderContext,System.Double)">
            <summary>
            Renderer2D.MeasureDataRange override. Measures the data range of
            rendered series and assigns it to the associated Axis objects if
            their MinValue and MaxValue are not set.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="origin">A double value specifying axis origin.</param>
        </member>
        <member name="M:MindFusion.Charting.StackRenderer.HitTest(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Renderer2D.HitTest override. Hit-tests the stack representations of data items.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a data point.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.StackRenderer.NearestElement(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Renderer2D.NearestElement override. Returns the data item closest to specified point.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a data point.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="T:MindFusion.Charting.StackRenderer.ProcessStackPoint">
            <summary>
            Defines the signature of delegates called to process a data point one element at a time.
            </summary>
            <param name="seriesIndex">An integer index of series in Series list.</param>
            <param name="dataIndex">An integer index of data item in specified series.</param>
            <param name="stackPoint">A PointF instance containing the Plot2D coordinates corresponding to current data item.</param>
            <param name="prevPoint">A PointF instance containing the Plot2D coordinates corresponding to previous data item.</param>
        </member>
        <member name="T:MindFusion.Charting.StackRenderer.ProcessStackRange">
            <summary>
            Defines the signature of delegates called to process all points from current data range at once.
            </summary>
            <param name="seriesIndex">An integer index of series in Series list.</param>
            <param name="points">
            A list of PointF values containing the Plot2D coordinates
            corresponding to data items in currently visible range.
            </param>
            <param name="prevPoints">
            A list of PointF values containing the Plot2D coordinates
            corresponding to previous series in currently visible range.
            </param>
        </member>
        <member name="M:MindFusion.Charting.AreaStackRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the AreaStackRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as stacked areas.</param>
        </member>
        <member name="M:MindFusion.Charting.AreaStackRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="T:MindFusion.Charting.ThreeD.LabelProjection">
            <summary>
            Represents the projection of a Label3D on the projection plane.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.LabelProjection.#ctor(MindFusion.Charting.ThreeD.Label3D,MindFusion.Charting.Point3D,MindFusion.Charting.Point3D)">
            <summary>
            Initializes a new instance of the LabelProjection class.
            </summary>
            <param name="label">The projected Label3D.</param>
            <param name="projTL">Projection of top-left corner of Label3D's layout rectangle.</param>
            <param name="projBR">Projection of bottom-right corner of Label3D's layout rectangle.</param>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.LabelProjection.DrawAsProjection(MindFusion.Charting.RenderContext)">
            <summary>
            Draws this projection in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.LabelProjection.Label">
            <summary>
            Gets or sets the projected Label3D.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.LabelProjection.ProjectionTopLeft">
            <summary>
            Gets or sets the projection of top-left corner of label's layout rectangle.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.LabelProjection.ProjectionBottomRight">
            <summary>
            Gets or sets the projection of bottom-right corner of label's layout rectangle.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.LabelProjection.ZSort">
            <summary>
            A value by which projections are sorted in depth buffer.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.TextStyle">
            <summary>
            Defines text appearance attributes.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.TextStyle.#ctor">
            <summary>
            Initializes a new instance of the TextStyle class.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.TextStyle.FontName">
            <summary>
            Gets or sets font name.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.TextStyle.FontSize">
            <summary>
            Gets or sets font size.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.TextStyle.FontStyle">
            <summary>
            Gets or sets font style.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.TextStyle.TextBrush">
            <summary>
            Gets or sets a Brush used to draw text.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.TextStyle.Background">
            <summary>
            Gets or sets the Brush used to fill background of data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.TextStyle.BorderStroke">
            <summary>
            Gets or sets the Brush used to draw borders of data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.TextStyle.BorderStrokeThickness">
            <summary>
            Gets or sets the width of data labels' borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.TextStyle.BorderStrokeDashStyle">
            <summary>
            Gets or sets the dash style of data labels' borders.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.SimplePanel">
            <summary>
            Represents a layout panel that arranges its child components over each other.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.SimplePanel.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Panel.Measure override. Measures the desired size of this panel and its child components.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.SimplePanel.Arrange(System.Double,System.Double,System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Arrange override. Sets the location and size
            of this panel and arranges its child components.
            </summary>
            <param name="x">A double value specifying horizontal position.</param>
            <param name="y">A double value specifying vertical position.</param>
            <param name="w">A double value specifying the component's width.</param>
            <param name="h">A double value specifying the component's height.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="T:MindFusion.Charting.LineType">
            <summary>
            Identifies how to connect adjacent data points in line and area charts.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.LineType.Polyline">
            <summary>
            Connect points using straight line segments.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.LineType.Step">
            <summary>
            Connect points using steps.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.LineType.Curve">
            <summary>
            Connect points using a cardinal spline.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Gauges.LinearGaugeRenderer">
            <summary>
            A Component that renders linear gauges in the dashboard.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Gauges.LinearGaugeRenderer.#ctor">
            <summary>
            Initializes a new instance of the LinearGaugeRenderer class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Gauges.LinearGaugeRenderer.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Measure override. Measures the desired size of this component.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.LinearGaugeRenderer.Arrange(System.Double,System.Double,System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Arrange override. Sets the location and size of this component relatively to its parent.
            </summary>
            <param name="x">A double value specifying horizontal position.</param>
            <param name="y">A double value specifying vertical position.</param>
            <param name="w">A double value specifying the component's width.</param>
            <param name="h">A double value specifying the component's height.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.LinearGaugeRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Component.Draw override. Draws this component in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.LinearGaugeRenderer.CreateController(MindFusion.Charting.RenderContext)">
            <summary>
            Component.CreateController override. Returns a ComponentController
            used to interact with this component.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>An instance of the LinearGaugeController class.</returns>
        </member>
        <member name="P:MindFusion.Charting.Gauges.LinearGaugeRenderer.Gauge">
            <summary>
            Gets or sets the LinearGauge represented by this renderer.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Gauges.LinearGaugeController">
            <summary>
            Controls user interaction with linear gauges.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Gauges.LinearGaugeController.#ctor(MindFusion.Charting.Gauges.LinearGaugeRenderer,MindFusion.Charting.RenderContext)">
            <summary>
            Initializes a new instance of the LinearGaugeController class.
            </summary>
            <param name="r">A LinearGaugeRenderer instance controlled by this object.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.LinearGaugeController.OnMouseDown(System.Double,System.Double)">
            <summary>
            Implements ComponentController.OnMouseDown. Called when the user presses a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.LinearGaugeController.OnMouseMove(System.Double,System.Double)">
            <summary>
            Implements ComponentController.OnMouseMove. Called when the user moves the mouse.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.LinearGaugeController.OnMouseUp(System.Double,System.Double)">
            <summary>
            Implements ComponentController.OnMouseUp. Called when the user releases a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.LinearGaugeController.DrawInteraction(MindFusion.Drawing.IGraphics)">
            <summary>
            Implements ComponentController.DrawInteraction. Draws a representation
            of the current state of user interaction on specified IGraphics surface.
            </summary>
            <param name="graphics">An IGraphics instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.LinearGaugeController.GetRunningAnimation">
            <summary>
            For internal use.
            </summary>
            <returns>An instance of a ComponentAnimation -derived class.</returns>
        </member>
        <member name="M:MindFusion.Charting.Gauges.LinearGaugeController.GetCursorHint(System.Double,System.Double)">
            <summary>
            For internal use.
            </summary>
            <returns>A member of the CursorHint enumeration.</returns>
        </member>
        <member name="P:MindFusion.Charting.Gauges.LinearGaugeController.Component">
            <summary>
            Implements ComponentController.Component. Gets the component modified by this controller.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.DataBoundSeries">
            <summary>
            Represents a series whose data items are retrieved from a data source.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.DataBoundSeries.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the DataBoundSeries class.
            </summary>
            <param name="dataSource">A reference to the data source object.</param>
        </member>
        <member name="M:MindFusion.Charting.DataBoundSeries.OnDataChanged(System.EventArgs)">
            <summary>
            Raises the DataChanged event.
            </summary>
            <param name="e">An instance of the EventArgs class.</param>
        </member>
        <member name="M:MindFusion.Charting.DataBoundSeries.GetValue(System.Int32,System.Int32)">
            <summary>
            Implements Series.GetValue. Returns a value for the specified data item in the data source.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="dimension">An integer value specifying the dimension whose coordinate to return.</param>
            <returns>A double-precision number representing the value of a data item in the data source.</returns>
        </member>
        <member name="M:MindFusion.Charting.DataBoundSeries.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            Implements Series.GetLabel. Returns a label for the specified data item in the data source.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="M:MindFusion.Charting.DataBoundSeries.IsEmphasized(System.Int32)">
            <summary>
            Implements Series.IsEmphasized. DataBoundSeries always returns false.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <returns>true to emphasize the specified data item, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.DataBoundSeries.IsSorted(System.Int32)">
            <summary>
            Implements Series.IsSorted. Gets a value indicating whether
            the series values increase monotonously in specified dimension.
            </summary>
            <param name="dimension">An integer value identifying the dimension.</param>
            <returns>true if the values are sorted in specified dimension, or false otherwise.</returns>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.DataSource">
            <summary>
            Gets or sets the data source this series is bound to.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.XDataField">
            <summary>
            Gets or sets the name of X data field in the data source.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.YDataField">
            <summary>
            Gets or sets the name of Y data field in the data source.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.ZDataField">
            <summary>
            Gets or sets the name of Z data field in the data source.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.InnerLabelsDataField">
            <summary>
            Gets or sets the name of inner labels data field in the data source.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.OuterLabelsDataField">
            <summary>
            Gets or sets the name of outer labels data field in the data source.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.ToolTipsDataField">
            <summary>
            Gets or sets the name of tooltips data field in the data source.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.XAxisLabelsDataField">
            <summary>
            Gets or sets the name of X axis labels data field in the data source.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.YAxisLabelsDataField">
            <summary>
            Gets or sets the name of Y axis labels data field in the data source.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.ZAxisLabelsDataField">
            <summary>
            Gets or sets the name of Z axis labels data field in the data source.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.DateTimeFormat">
            <summary>
            Gets or sets a .NET format string indicating how to format DateTime values as labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.Size">
            <summary>
            Implements Series.Size. Gets the number of data items in the data source.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.Dimensions">
            <summary>
            Implements Series.Dimensions. Returns the number of X/Y/ZDataField properties set.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.Title">
            <summary>
            Implements Series.Title. Gets or sets the title of this series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.DataBoundSeries.SupportedLabels">
            <summary>
            Implements Series.SupportedLabels. Result depends on which *LabelsDataField properties are set.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.DataBoundSeries.DataChanged">
            <summary>
            Implements Series.DataChanged. Raised when the values in this series change.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.Orientation">
            <summary>
            Identifies layout orientation.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.Orientation.Horizontal">
            <summary>
            Horizontal orientation.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.Orientation.Vertical">
            <summary>
            Vertical orientation.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.XmlPersistContext">
            <summary>
            Contains methods that facilitate serializing and deserializing
            objects to and from XML documents.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.#ctor(System.Xml.Linq.XDocument,System.Int32)">
            <summary>
            Initializes a new instance of the XmlPersistContext class.
            </summary>
            <param name="document">
            The associated XDocument.
            </param>
            <param name="fileVersion">
            Specifies the current file format number.
            </param>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.AddChildElement(System.String,System.Xml.Linq.XContainer)">
            <summary>
            Adds a new child node with the specified name to
            the specified parent node.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.AddChildElement(System.String,System.Xml.Linq.XContainer,System.String)">
            <summary>
            Adds a new child node with the specified name and
            value to the specified parent node.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteString(System.String,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a string value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteBool(System.Boolean,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a boolean value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteChar(System.Char,System.String,System.Xml.Linq.XElement)">
            <summary>
            Write a char value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteDecimal(System.Decimal,System.String,System.Xml.Linq.XElement)">
            <summary>
            Write a decimal value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteByte(System.Byte,System.String,System.Xml.Linq.XElement)">
            <summary>
            Write a byte value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteSByte(System.SByte,System.String,System.Xml.Linq.XElement)">
            <summary>
            Write a 8-bit signed integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteInt(System.Int32,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes an integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteShort(System.Int16,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a short value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteLong(System.Int64,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a long value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteUInt(System.UInt32,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes an unsigned integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteUShort(System.UInt16,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes an unsigned short value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteULong(System.UInt64,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes an unsigned long value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteFloat(System.Single,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a float value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteDouble(System.Double,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a double value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteDouble(System.Nullable{System.Double},System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a nullable double value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteDoubleList(System.Collections.Generic.IList{System.Double},System.String,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified list of doubles.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteSizeF(System.Drawing.SizeF,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a SizeF with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteRectangleF(System.Drawing.RectangleF,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a RectangleF with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteThickness(MindFusion.Thickness,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a Thickness with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WritePointF(System.Drawing.PointF,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a PointF with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WritePointF(System.Single,System.Single,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified PointF under the specified name.
            The x and y components of the point are written as attributes.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.FromPointF(System.Drawing.PointF)">
            <summary>
            Converts the specified PointF object to a string.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.FromPoint3D(MindFusion.Charting.Point3D)">
            <summary>
            Converts the specified Point3D object to a string.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteBrush(MindFusion.Drawing.Brush,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a reference to the specified brush. The brush
            is registered within the internal hashtable for
            subsequent serialization.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteBrushList(System.Collections.Generic.IList{MindFusion.Drawing.Brush},System.String,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified brushes.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteBrushes(System.Xml.Linq.XElement)">
            <summary>
            Writes all currently accumulated brushes.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteFloatArray(System.Single[],System.String,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified array.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteColorArray(System.Drawing.Color[],System.String,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified array.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WritePen(MindFusion.Drawing.Pen,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified pen.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteFont(System.Drawing.Font,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified font.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteEnum(System.Object,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified enum value.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteStream(System.IO.Stream,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified stream.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteImage(System.Drawing.Image,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes a reference to the specified image. The image
            is registered within the internal hashtable for
            subsequent serialization.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteImages(System.Xml.Linq.XElement)">
            <summary>
            Writes all currently accumulated images.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteColor(System.Drawing.Color,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified color.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteStringFormat(System.Drawing.StringFormat,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified StringFormat object.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteDictionary(System.Collections.IDictionary,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified dictionary.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteObject(System.Object,System.String,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Writes the specified object under the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.WriteObject(System.Object,System.String,System.Xml.Linq.XElement)">
            <summary>
            Writes the specified object under the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadString(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a string value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadString(System.String,System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a string value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadBool(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a boolean value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadBool(System.String,System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Reads a boolean value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadDecimal(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a decimal value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadByte(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a byte value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadSByte(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a 8-bit signed integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadChar(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a char value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadInt(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads an integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadInt(System.String,System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Reads an integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadShort(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a short value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadShort(System.String,System.Xml.Linq.XElement,System.Int16)">
            <summary>
            Reads a short value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadLong(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a long value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadUInt(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads an unsigned integer value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadUShort(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads an unsigned short value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadULong(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads an unsigned  long value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadFloat(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a float value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadFloat(System.String,System.Xml.Linq.XElement,System.Single)">
            <summary>
            Reads a float value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadDouble(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a double value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadDouble(System.String,System.Xml.Linq.XElement,System.Double)">
            <summary>
            Reads a double value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadDoubleList(System.String,System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a list of doubles.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadDoubleList(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a list of doubles.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadNullableDouble(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a nullable double value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadSizeF(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a SizeF object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadRectangleF(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a RectangleF object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadThickness(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a Thickness object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadPointF(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a PointF object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadPointF(System.Xml.Linq.XElement)">
            <summary>
            Reads a PointF object from the specified element.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ToPointF(System.String)">
            <summary>
            Converts the specified string to a Point object.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ToPoint3D(System.String)">
            <summary>
            Converts the specified string to a Point3D object.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadBrush(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a MindFusion.Drawing.Brush object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadBrush(System.String,System.Xml.Linq.XElement,MindFusion.Drawing.Brush)">
            <summary>
            Reads a MindFusion.Drawing.Brush object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadBrush(System.Xml.Linq.XElement,MindFusion.Drawing.Brush)">
            <summary>
            Reads a MindFusion.Drawing.Brush object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadBrushList(System.String,System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a list of brushes.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadBrushList(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reads a list of brushes.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadBrushes(System.Xml.Linq.XElement)">
            <summary>
            Reads all brushes.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadFloatArray(System.String,System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a float array with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadColorArray(System.String,System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a color array with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadPen(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a MindFusion.Drawing.Pen object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadPen(System.String,System.Xml.Linq.XElement,MindFusion.Drawing.Pen)">
            <summary>
            Reads a MindFusion.Drawing.Pen object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadFont(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a Font object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadFont(System.String,System.Xml.Linq.XElement,System.Drawing.Font)">
            <summary>
            Reads a Font object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadEnum(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads an enum value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadEnum(System.String,System.Xml.Linq.XElement,System.Object)">
            <summary>
            Reads an enum value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadNullableEnum(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a nullable enum value with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadStream(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a stream with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadImage(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads an Image object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadImages(System.Xml.Linq.XElement)">
            <summary>
            Reads all images.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadColor(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a color with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadColor(System.String,System.Xml.Linq.XElement,System.Drawing.Color)">
            <summary>
            Reads a color with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadStringFormat(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a StringFormat object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadStringFormat(System.String,System.Xml.Linq.XElement,System.Drawing.StringFormat)">
            <summary>
            Reads a StringFormat object with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadHashtable(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads a hashtable with the specified name.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XmlPersistContext.ReadObject(System.String,System.Xml.Linq.XElement)">
            <summary>
            Reads an object with the specified name.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.XmlPersistContext.LatestFormat">
            <summary>
            Specifies the latest file format revision number.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.XmlPersistContext.document">
            <summary>
            The underlying document.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.XmlPersistContext.brushes">
            <summary>
            A map of all brushes.
            </summary>
            <remarks>
            During serialization, this map will contain all
            serialized brushes, mapped to their indices.
            During deserialization, the brushes are loaded
            from the appropriate section in the XML file,
            the first time they are accessed.
            This list is of type (Brush, int) when serializing
            and of type (int, Brush) when deserializing.
            </remarks>
        </member>
        <member name="F:MindFusion.Charting.XmlPersistContext.effects">
            <summary>
            A map of all effects.
            </summary>
            <remarks>
            During serialization, this map will contain all
            serialized effects, mapped to their indices.
            During deserialization, the effects are loaded
            from the appropriate section in the XML file,
            the first time they are accessed.
            This list is of type (NodeEffect, int) when serializing
            and of type (int, NodeEffect) when deserializing.
            </remarks>
        </member>
        <member name="F:MindFusion.Charting.XmlPersistContext.images">
            <summary>
            A map of all images.
            </summary>
            <remarks>
            During serialization, this map will contain all
            serialized images, mapped to their indices.
            During deserialization, the images are loaded
            from the appropriate section in the XML file,
            the first time they are accessed.
            This list is of type (Image, int) when serializing
            and of type (int, Image) when deserializing.
            </remarks>
        </member>
        <member name="F:MindFusion.Charting.XmlPersistContext.formatter">
            <summary>
            A binary formatter used when serializing arbitrary objects.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.XmlPersistContext.includeUnalteredProperties">
            <summary>
            Specifies whether properties that have their default value
            should be serialized to XML.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.XmlPersistContext.inplaceResources">
            <summary>
            Specifies whether resource accumulation is disabled.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlPersistContext.XmlDocument">
            <summary>
            Gets the underlying XML document.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlPersistContext.FileVersion">
            <summary>
            Gets the format revision number for the file being currently serialized.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlPersistContext.IncludeUnalteredProperties">
            <summary>
            Gets or sets a value specifies whether properties that have
            their default value should be serialized to XML.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.XmlPersistContext.InplaceResources">
            <summary>
            Gets or sets a value indicating whether resource accumulation is disabled.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.ThreeD.Vector3D">
            <summary>
            Represents a three-dimensional vector.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Vector3D.#ctor">
            <summary>
            Initializes a new instance of the Vector3D class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Vector3D class.
            </summary>
            <param name="x">X component of the vector.</param>
            <param name="y">Y component of the vector.</param>
            <param name="z">Z component of the vector.</param>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Vector3D.#ctor(MindFusion.Charting.Point3D,MindFusion.Charting.Point3D)">
            <summary>
            Initializes a new instance of the Vector3D class.
            </summary>
            <param name="p1">Start point of the vector.</param>
            <param name="p2">End point of the vector.</param>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Vector3D.CrossProduct(MindFusion.Charting.ThreeD.Vector3D,MindFusion.Charting.ThreeD.Vector3D)">
            <summary>
            Calculates the cross-product of two vectors.
            </summary>
            <param name="a">A Vector3D instance.</param>
            <param name="b">A Vector3D instance.</param>
            <returns>A Vector3D representing the cross-product of specified vectors.</returns>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Vector3D.Length">
            <summary>
            Calculates the length of this vector.
            </summary>
            <returns>A double value representing the vector length.</returns>
        </member>
        <member name="M:MindFusion.Charting.ThreeD.Vector3D.Div(System.Double)">
            <summary>
            Divides the vector by specified measure.
            </summary>
            <param name="s">A double value representing the divisor.</param>
            <returns>A Vector3D representing the result.</returns>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Vector3D.X">
            <summary>
            Gets or sets the X component of this vector.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Vector3D.Y">
            <summary>
            Gets or sets the Y component of this vector.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Vector3D.Z">
            <summary>
            Gets or sets the Z component of this vector.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.MarginsConverter">
            <summary>
            The TypeConverter of the Margins structure.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.MarginsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            TypeConverter.CanConvertFrom override.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.MarginsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            TypeConverter.ConvertFrom override.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.MarginsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            TypeConverter.CanConvertTo override.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.MarginsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            TypeConverter.ConvertTo override.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.CurveAreaStackRenderer">
            <summary>
            A SeriesRenderer that draws stacked areas in its containing plot.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.CurveAreaStackRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the CurveAreaStackRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as stacked areas.</param>
        </member>
        <member name="M:MindFusion.Charting.CurveAreaStackRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="T:MindFusion.Charting.Components.CursorHint">
            <summary>
            Specifies what mouse cursor to display while a user interacts with the control.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.CursorHint.Move">
            <summary>
            Indicates the cursor specified by the MoveCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.CursorHint.Rotate">
            <summary>
            Indicates the cursor specified by the RotateCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.CursorHint.HorizontalResize">
            <summary>
            Indicates the cursor specified by the HorizontalResizeCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.CursorHint.VerticalResize">
            <summary>
            Indicates the cursor specified by the VerticalResizeCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.CursorHint.DiagonalResize">
            <summary>
            Indicates the cursor specified by the DiagonalResizeCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.CursorHint.CounterDiagonalResize">
            <summary>
            Indicates the cursor specified by the CounterDiagonalResizeCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.CursorHint.Pointer">
            <summary>
            Indicates the cursor specified by the PointerCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.CursorHint.Disallow">
            <summary>
            Indicates the cursor specified by the DisallowCursor property.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.CursorHint.DontChange">
            <summary>
            Indicates the cursor specified by the Cursor property.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.BarLayout">
            <summary>
            Identifies supported bar placements when rendering multiple series.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.BarLayout.SideBySide">
            <summary>
            Render elements at same index from all series as a group of side-by-side bars.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.BarLayout.Stack">
            <summary>
            Render elements at same index from all series as stacked bars.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.BarLayout.Overlay">
            <summary>
            Render elements at same index from all series as overlaid bars.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.XAxisRenderer">
            <summary>
            A Component that renders horizontal Axis ranges.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.XAxisRenderer.#ctor(MindFusion.Charting.Axis)">
            <summary>
            Initializes a new instance of the XAxisRenderer class.
            </summary>
            <param name="axis">The Axis that will be drawn by this object.</param>
        </member>
        <member name="M:MindFusion.Charting.XAxisRenderer.EffectiveAxis(MindFusion.Charting.RenderContext)">
            <summary>
            AxisRenderer.EffectiveAxis override. Gets the effective horizontal Axis in current context,
            getting one from Plot2D or chart control if there's no local Axis associated with this renderer.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>An Axis instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.XAxisRenderer.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Measure override. Measures the desired size of this component.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.XAxisRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Component.Draw override. Draws this component in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="P:MindFusion.Charting.XAxisRenderer.PlotBottomSide">
            <summary>
            Gets or sets whether this XAxisRenderer is shown at the bottom side of a plot.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.UniformSeriesStyle">
            <summary>
            Implements SeriesStyle using uniform attributes for all elements in all series.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.UniformSeriesStyle.#ctor">
            <summary>
            Initializes a new instance of the UniformSeriesStyle class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.UniformSeriesStyle.#ctor(MindFusion.Drawing.Brush,MindFusion.Drawing.Brush,System.Double,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Initializes a new instance of the UniformSeriesStyle class.
            </summary>
            <param name="fill">A Brush used to fill all series elements.</param>
            <param name="stroke">A Brush used to stroke all series elements.</param>
            <param name="strokeThickness">Uniform thickness of series elements' strokes.</param>
            <param name="strokeDashStyle">Uniform dash style of series elements' strokes.</param>
        </member>
        <member name="M:MindFusion.Charting.UniformSeriesStyle.Fill(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.Fill. Returns UniformFill for any data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.UniformSeriesStyle.Stroke(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.Stroke. Returns UniformStroke for any data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.UniformSeriesStyle.StrokeThickness(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.StrokeThickness. Returns UniformStrokeThickness for any data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A nullable double value specifying stroke thickness.</returns>
        </member>
        <member name="M:MindFusion.Charting.UniformSeriesStyle.StrokeDashStyle(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.StrokeDashStyle. Returns UniformStrokeDashStyle for any data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A nullable DashStyle value specifying stroke dash style.</returns>
        </member>
        <member name="P:MindFusion.Charting.UniformSeriesStyle.UniformFill">
            <summary>
            Gets or sets a Brush used to fill all elements of all series uniformly.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.UniformSeriesStyle.UniformStroke">
            <summary>
            Gets or sets a Brush used to stroke all elements of all series uniformly.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.UniformSeriesStyle.UniformStrokeThickness">
            <summary>
            Gets or sets uniform stroke thickness for all elements of all series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.UniformSeriesStyle.UniformStrokeDashStyle">
            <summary>
            Gets or sets uniform stroke dash style for all elements of all series.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Plot2D">
            <summary>
            A plot whose series are rendered relatively to a two-dimensional Cartesian coordinate system.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Plot2D.#ctor">
            <summary>
            Initializes a new instance of the Plot2D class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Plot2D.CreateController(MindFusion.Charting.RenderContext)">
            <summary>
            Component.CreateController override. Returns a ComponentController
            used to interact with this component.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>An instance of the PanController class.</returns>
        </member>
        <member name="M:MindFusion.Charting.Plot2D.Visit(MindFusion.Charting.Components.ComponentVisitor)">
            <summary>
            Component.Visit override. Calls visitor's VisitPlot method.
            </summary>
            <param name="visitor">An instance of a ComponentVisitor -derived class.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot2D.DrawGrid(MindFusion.Charting.RenderContext)">
            <summary>
            Plot.DrawGrid override. Draws the grid specified by GridType property.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot2D.DrawOrigins(MindFusion.Charting.RenderContext)">
            <summary>
            Plot.DrawOrigins override. Draws the plot's axis origin lines.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot2D.ZoomOut(System.Collections.Generic.IEnumerable{MindFusion.Charting.Axis})">
            <summary>
            Zooms out from current data range.
            </summary>
            <param name="axes">The axes whose ranges should be scaled.</param>
        </member>
        <member name="M:MindFusion.Charting.Plot2D.ResetZoom">
            <summary>
            Resets the zoom level to original axis ranges.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2D.XAxis">
            <summary>
            Gets or sets default Axis instance used to map X data coordinates of series
            rendered inside this plot to the plot's pixels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2D.YAxis">
            <summary>
            Gets or sets default Axis instance used to map Y data coordinates of series
            rendered inside this plot to the plot's pixels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2D.GridType">
            <summary>
            Gets or sets the type of grid to draw in this plot.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2D.PinGrid">
            <summary>
            Gets or sets a value indicating whether grid stripes should be pinned
            in place or scroll together with the plot when users pan it.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2D.IsZoomed">
            <summary>
            Gets a value indicating whether the user has zoomed into this plot.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2D.AllowPan">
            <summary>
            Gets or sets a value indicating whether users are allowed to pan this plot.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2D.VerticalScroll">
            <summary>
            Specifies whether the plot should scroll vertically when panned.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.Plot2D.ZoomChanged">
            <summary>
            Raised when the user zooms into this plot's data range.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2D.GridLineColor">
            <summary>
            Gets or sets the color of the grid lines.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2D.GridLineThickness">
            <summary>
            Gets or sets the thickness of the grid lines.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2D.GridLineStyle">
            <summary>
            Gets or sets the style of the grid lines.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2D.GridColor1">
            <summary>
            Gets or sets the main color of the grid.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Plot2D.GridColor2">
            <summary>
            Gets or sets the alternating color of the grid.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.FunnelRenderer">
            <summary>
            Implements a SeriesRenderer used to draw funnel charts. Funnel charts represent the stages
            of a process and show relative values or measurements associated with each stage.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.FunnelRenderer.#ctor(MindFusion.Charting.Series)">
            <summary>
            Initializes a new instance of the FunnelRenderer class.
            </summary>
            <param name="series">The Series that should be rendered as a funnel.</param>
        </member>
        <member name="M:MindFusion.Charting.FunnelRenderer.#ctor(MindFusion.Charting.Series,System.Int32)">
            <summary>
            Initializes a new instance of the FunnelRenderer class.
            </summary>
            <param name="series">The Series that should be rendered as a funnel.</param>
            <param name="dimension">Specifies the Series dimension index that should be used to access data.</param>
        </member>
        <member name="M:MindFusion.Charting.FunnelRenderer.EnumSegments(MindFusion.Charting.RenderContext,MindFusion.Charting.FunnelRenderer.ProcessSegment)">
            <summary>
            Enumerates the segments of the funnel.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessBars callback.</param>
        </member>
        <member name="M:MindFusion.Charting.FunnelRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.FunnelRenderer.DrawHighlight(MindFusion.Charting.RenderContext,MindFusion.Charting.HitResult)">
            <summary>
            SeriesRenderer.DrawHighlight override. Draws highlighted slice in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="hitResult">A HitResult instance identifying highlighted data item.</param>
        </member>
        <member name="M:MindFusion.Charting.FunnelRenderer.HitTest(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            SeriesRenderer.HitTest override. Hit-tests the slices representing data items.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a funnel segment.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.FunnelRenderer.NearestElement(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            SeriesRenderer.NearestElement override. Returns the data item closest to specified point.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a funnel segment.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.FunnelRenderer.EnumSeries">
            <summary>
            Implements the SeriesContainer interface.
            </summary>
            <returns>An instance of the IEnumerable&lt;Series&gt; class.</returns>
        </member>
        <member name="P:MindFusion.Charting.FunnelRenderer.Series">
            <summary>
            Gets or sets the Series drawn by this FunnelRenderer.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.FunnelRenderer.StemWidth">
            <summary>
            Gets or sets the width of the funnel stem.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.FunnelRenderer.SegmentSpacing">
            <summary>
            Gets or sets the spacing between segments.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.FunnelRenderer.Dimension">
            <summary>
            Gets or sets the dimension index that should be used to read data from the Series.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.FunnelRenderer.ProcessSegment">
            <summary>
            Defines the signature of delegates called to process funnel segments.
            </summary>
            <param name="dataIndex">An integer index of data item in Series.</param>
            <param name="poly">The polygon of the segment.</param>
        </member>
        <member name="T:MindFusion.Charting.Components.ComponentVisitor">
            <summary>
            Defines the base visitor class for hierarchy of Component objects.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.ComponentVisitor.VisitPanel(MindFusion.Charting.Components.Panel)">
            <summary>
            Visits a Panel component.
            </summary>
            <param name="panel">A Panel instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.ComponentVisitor.VisitPlot(MindFusion.Charting.Plot)">
            <summary>
            Visits a Plot component.
            </summary>
            <param name="plot">A Plot instance.</param>
        </member>
        <member name="T:MindFusion.Charting.ThreeD.Label3D">
            <summary>
            Represents a text label in 3D scene.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.ThreeD.Label3D.DrawLabel">
            <summary>
            A callback used to draw text at projected position.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Label3D.TopRight">
            <summary>
            Gets or sets the top-right corner of label's layout rectangle.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Label3D.BottomLeft">
            <summary>
            Gets or sets the bottom-left corner of label's layout rectangle.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Label3D.Text">
            <summary>
            Gets or sets the label's text.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Label3D.Font">
            <summary>
            Gets or sets the label's font.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.ThreeD.Label3D.RotationAngle">
            <summary>
            Gets or sets the label's rotation angle.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.ThreeD.Label3D.DrawLabelDelegate">
            <summary>
            Gets or sets the signature of callback methods used to render text at projected point.
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="T:MindFusion.Charting.Theme">
            <summary>
            Represents a dashboard's theme defining all appearance attributes of its elements.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Theme.#ctor">
            <summary>
            Initializes a new instance of the Theme class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Theme.#ctor(MindFusion.Drawing.Brush,MindFusion.Drawing.Brush,System.Double,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Initializes a new instance of the Theme class.
            </summary>
            <param name="fill">A Brush used to fill all series elements.</param>
            <param name="stroke">A Brush used to stroke all series elements.</param>
            <param name="strokeThickness">Uniform thickness of series elements' strokes.</param>
            <param name="strokeDashStyle">Uniform dash style of series elements' strokes.</param>
        </member>
        <member name="M:MindFusion.Charting.Theme.LoadFromString(System.String)">
            <summary>
            Loads the theme values from specified XML string.
            </summary>
            <param name="xml">An XML string defining the theme.</param>
        </member>
        <member name="M:MindFusion.Charting.Theme.LoadFrom(System.String)">
            <summary>
            Loads the theme values from specified file.
            </summary>
            <param name="fileName">A string specifying the file name or path.</param>
        </member>
        <member name="M:MindFusion.Charting.Theme.LoadFrom(System.Xml.Linq.XElement)">
            <summary>
            Loads the theme values from specified XML element.
            </summary>
            <param name="element">An XElement instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Theme.SaveTo(System.String)">
            <summary>
            Saves the theme values to specified file.
            </summary>
            <param name="fileName">A string specifying the file name or path.</param>
        </member>
        <member name="M:MindFusion.Charting.Theme.SaveTo(System.Xml.Linq.XElement)">
            <summary>
            Saves the theme values to specified XML element.
            </summary>
            <param name="element">An XElement instance.</param>
        </member>
        <member name="P:MindFusion.Charting.Theme.TitleFontName">
            <summary>
            Gets or sets the name of font used to draw the chart title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.TitleFontSize">
            <summary>
            Gets or sets the size of font used to draw the chart title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.TitleFontStyle">
            <summary>
            Gets or sets the style of font used to draw the chart title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.TitleBrush">
            <summary>
            Gets or sets the Brush used to draw the chart title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.SubtitleFontName">
            <summary>
            Gets or sets the name of font used to draw the chart sub-title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.SubtitleFontSize">
            <summary>
            Gets or sets the size of font used to draw the chart sub-title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.SubtitleFontStyle">
            <summary>
            Gets or sets the style of font used to draw the chart sub-title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.SubtitleBrush">
            <summary>
            Gets or sets the Brush used to draw the chart sub-title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.AxisLabelsFontName">
            <summary>
            Gets or sets the name of font used to draw axis labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.AxisLabelsFontSize">
            <summary>
            Gets or sets the size of font used to draw axis labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.AxisLabelsFontStyle">
            <summary>
            Gets or sets the style of font used to draw axis labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.AxisLabelsBrush">
            <summary>
            Gets or sets the Brush used to draw axis labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.AxisTitleFontName">
            <summary>
            Gets or sets the name of font used to draw axis titles.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.AxisTitleFontSize">
            <summary>
            Gets or sets the size of font used to draw axis titles.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.AxisTitleFontStyle">
            <summary>
            Gets or sets the style of font used to draw axis titles.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.AxisTitleBrush">
            <summary>
            Gets or sets the Brush used to draw axis titles.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.DataLabelsFontName">
            <summary>
            Gets or sets the name of font used to draw data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.DataLabelsFontSize">
            <summary>
            Gets or sets the size of font used to draw data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.DataLabelsFontStyle">
            <summary>
            Gets or sets the style of font used to draw data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.DataLabelsBrush">
            <summary>
            Gets or sets the Brush used to draw data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.DataLabelsBackground">
            <summary>
            Gets or sets the Brush used to fill background of data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.DataLabelsBorderStroke">
            <summary>
            Gets or sets the Brush used to draw borders of data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.DataLabelsBorderThickness">
            <summary>
            Gets or sets the width of data labels' borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.DataLabelsBorderDashStyle">
            <summary>
            Gets or sets the dash style of data labels' borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.WidgetFontName">
            <summary>
            Gets or sets the name of font used to draw text in UI widgets.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.WidgetFontSize">
            <summary>
            Gets or sets the size of font used to draw text in UI widgets.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.WidgetFontStyle">
            <summary>
            Gets or sets the style of font used to draw text in UI widgets.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.WidgetBrush">
            <summary>
            Gets or sets the Brush used to draw text in UI widgets.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.LegendTitleFontName">
            <summary>
            Gets or sets the name of font used to draw legend titles.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.LegendTitleFontSize">
            <summary>
            Gets or sets the size of font used to draw legend titles.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.LegendTitleFontStyle">
            <summary>
            Gets or sets the style of font used to draw legend titles.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.LegendTitleBrush">
            <summary>
            Gets or sets the Brush used to draw legend titles.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.UniformSeriesFill">
            <summary>
            Gets or sets a Brush used to fill all elements of all series uniformly.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.UniformSeriesStroke">
            <summary>
            Gets or sets a Brush used to stroke all elements of all series uniformly.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.UniformSeriesStrokeThickness">
            <summary>
            Gets or sets uniform stroke thickness for all elements of all series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.UniformSeriesStrokeDashStyle">
            <summary>
            Gets or sets uniform stroke dash style for all elements of all series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.CommonSeriesFills">
            <summary>
            Gets or sets a list of brushes, each Brush used to fill all elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.CommonSeriesStrokes">
            <summary>
            Gets or sets a list of brushes, each Brush used to stroke all elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.CommonSeriesStrokeThicknesses">
            <summary>
            Gets or sets a list of stroke thicknesses, each thickness applied to all elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.CommonSeriesStrokeDashStyles">
            <summary>
            Gets or sets a list of dash styles, each style applied to all elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.SeriesFills">
            <summary>
            Gets or sets a list of Brush lists, each list used to draw a different series,
            and each Brush used to fill individual elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.SeriesStrokes">
            <summary>
            Gets or sets a list of Brush lists, each list used to stroke a different series,
            and each Brush used to stroke individual elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.SeriesStrokeThicknesses">
            <summary>
            Gets or sets a list of double lists, each list used to stroke a different series,
            and each double value specifying thickness of individual elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.SeriesStrokeDashStyles">
            <summary>
            Gets or sets a list of DashStyle lists, each list used to stroke a different series,
            and each DashStyle value specifying style of individual elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.PlotBackground">
            <summary>
            Gets or sets a Brush used to draw the background of plots.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.PlotBorderStroke">
            <summary>
            Gets or sets a Brush used to stroke plot borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.PlotBorderStrokeThickness">
            <summary>
            Gets or sets the thickness of plot borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.PlotBorderStrokeDashStyle">
            <summary>
            Gets or sets the dash style of plot borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.LegendBackground">
            <summary>
            Gets or sets a Brush used to draw legend background.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.HighlightStroke">
            <summary>
            Gets or sets a Brush used to stroke highlighted items.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.HighlightStrokeThickness">
            <summary>
            Gets or sets the thickness of highlight strokes.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.HighlightStrokeDashStyle">
            <summary>
            Gets or sets the dash style of highlight strokes.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.AxisStroke">
            <summary>
            Gets or sets a Brush used to stroke axis lines.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.AxisStrokeThickness">
            <summary>
            Gets or sets the thickness of axis lines.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.AxisStrokeDashStyle">
            <summary>
            Gets or sets the dash style of axis lines.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.LegendBorderStroke">
            <summary>
            Gets or sets a Brush used to draw legend borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.LegendBorderStrokeThickness">
            <summary>
            Gets or sets the thickness of legend borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.LegendBorderStrokeDashStyle">
            <summary>
            Gets or sets the dash style of legend borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GridLineColor">
            <summary>
            Gets or sets the line color of plot grid.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GridLineThickness">
            <summary>
            Gets or sets the thickness of plot grid lines.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GridLineStyle">
            <summary>
            Gets or sets the style of plot grid lines.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GridColor1">
            <summary>
            Gets or sets the main color of plot grid.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GridColor2">
            <summary>
            Gets or sets the alternating color of plot grid.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugeBackground">
            <summary>
            Gets or sets a Brush used to draw gauge backgrounds.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugeStroke">
            <summary>
            Gets or sets a Brush used to stroke gauge borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugeStrokeThickness">
            <summary>
            Gets or sets the thickness of gauge borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugeScaleBackground">
            <summary>
            Gets or sets a Brush used to draw the background of gauge scales.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugeScaleStroke">
            <summary>
            Gets or sets a Brush used to stroke gauge scales.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugeScaleStrokeThickness">
            <summary>
            Gets or sets the thickness of gauge scale strokes.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugePointerBackground">
            <summary>
            Gets or sets a Brush used to draw gauge pointer backgrounds.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugePointerStroke">
            <summary>
            Gets or sets a Brush used to stroke gauge pointers.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugePointerStrokeThickness">
            <summary>
            Gets or sets the thickness of gauge pointer strokes.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugeTickBackground">
            <summary>
            Gets or sets a Brush used to draw gauge tick backgrounds.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugeTickStroke">
            <summary>
            Gets or sets a Brush used to stroke gauge ticks.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugeTickStrokeThickness">
            <summary>
            Gets or sets the thickness of gauge tick strokes.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugeFontName">
            <summary>
            Gets or sets the name of font used to draw text in gauges.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugeFontStyle">
            <summary>
            Gets or sets the style of font used to draw text in gauges.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Theme.GaugeFontSize">
            <summary>
            Gets or sets the size of font used to draw text in gauges.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.Theme.PropertyChanged">
            <summary>
            Implements INotifyPropertyChanged.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.ScatterType">
            <summary>
            Identifies the shapes rendered by a ScatterRenderer.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.ScatterType.None">
            <summary>
            Do not draw scatter.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.ScatterType.Circle">
            <summary>
            Draw circles.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.ScatterType.Diamond">
            <summary>
            Draw diamonds.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.ScatterType.Square">
            <summary>
            Draw squares.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.ScatterType.Triangle">
            <summary>
            Draw triangles.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.PointSeries">
            <summary>
            Represents a data series defined by a list of PointF objects.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PointSeries.#ctor(System.Collections.Generic.IList{System.Drawing.PointF},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the PointSeries class.
            </summary>
            <param name="points">A list of points.</param>
            <param name="labels">A list of labels.</param>
        </member>
        <member name="M:MindFusion.Charting.PointSeries.GetValue(System.Int32,System.Int32)">
            <summary>
            Implements Series.GetValue. Returns a coordinate of specified point in this series.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="dimension">An integer value specifying the dimension whose coordinate to return.</param>
            <returns>A double-precision number representing the value of a data item in the series.</returns>
        </member>
        <member name="M:MindFusion.Charting.PointSeries.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            Implements Series.GetLabel. Returns an element of the Labels list.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="M:MindFusion.Charting.PointSeries.IsEmphasized(System.Int32)">
            <summary>
            Implements Series.IsEmphasized. PointSeries always returns false.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <returns>true to emphasize the specified data item, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.PointSeries.IsSorted(System.Int32)">
            <summary>
            Implements Series.IsSorted. PointSeries always returns false.
            </summary>
            <param name="dimension">An integer value identifying the dimension.</param>
            <returns>true if the values are sorted in specified dimension, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.PointSeries.OnDataChanged">
            <summary>
            Raises the DataChanged event.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PointSeries.Size">
            <summary>
            Implements Series.Size. Returns the number of elements in Points list.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PointSeries.Dimensions">
            <summary>
            Implements Series.Dimensions. Returns 2.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PointSeries.SupportedLabels">
            <summary>
            Implements Series.SupportedLabels. Returns InnerLabel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PointSeries.Points">
            <summary>
            Gets or sets the series' points.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PointSeries.Labels">
            <summary>
            Gets or sets the data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PointSeries.Title">
            <summary>
            Implements Series.Title. Gets or sets the title of this series.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.PointSeries.DataChanged">
            <summary>
            Implements Series.DataChanged. Raised when the values in this series change.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Point3D">
            <summary>
            Represents a point in 3D space.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Point3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Point3D struct.
            </summary>
            <param name="x">X coordinate of the point.</param>
            <param name="y">Y coordinate of the point.</param>
            <param name="z">Z coordinate of the point.</param>
        </member>
        <member name="M:MindFusion.Charting.Point3D.Distance(MindFusion.Charting.Point3D)">
            <summary>
            Gets the distance to specified point.
            </summary>
            <param name="p">A Point3D instance.</param>
            <returns>A double value representing the distance.</returns>
        </member>
        <member name="M:MindFusion.Charting.Point3D.Add(MindFusion.Charting.Point3D,MindFusion.Charting.Point3D)">
            <summary>
            Sums two points' coordinates.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>A Point3D containing sum of coordinates.</returns>
        </member>
        <member name="M:MindFusion.Charting.Point3D.Scale(System.Double)">
            <summary>
            Scales the point's coordinates by specified scale factor.
            </summary>
            <param name="scale">A double value by which to multiply point's coordinates.</param>
            <returns>A Point3D containing scaled coordinates.</returns>
        </member>
        <member name="M:MindFusion.Charting.Point3D.ToString">
            <summary>
            Object.ToString override.
            </summary>
            <returns>A string representation of the points.</returns>
        </member>
        <member name="P:MindFusion.Charting.Point3D.X">
            <summary>
            Gets or sets the X coordinate of this point.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Point3D.Y">
            <summary>
            Gets or sets the Y coordinate of this point.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Point3D.Z">
            <summary>
            Gets or sets the Z coordinate of this point.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Plot3D">
            <summary>
            A plot whose series are rendered relatively to a three-dimensional Cartesian coordinate system.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Plot3D.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Plot.Draw override. Draws a projection of 3D models
            generated by contained Renderer3D objects.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="P:MindFusion.Charting.Plot3D.ZAxis">
            <summary>
            Gets or sets default Axis instance used to map Z data coordinates of series
            rendered inside this plot to the plot's pixels.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.INotifyPropertyValueChanged">
            <summary>
            Provides notification for property changes.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.INotifyPropertyValueChanged.PropertyValueChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.PropertyEventArgs">
            <summary>
            Provides data for the PropertyValueChanged event.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PropertyEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the PropertyEventArgs class.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PropertyEventArgs.PropertyName">
            <summary>
            Gets the name of the property that changed.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PropertyEventArgs.OldValue">
            <summary>
            Gets the value of the property before the change.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.PropertyEventArgs.NewValue">
            <summary>
            Gets the current value of the property.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.CurveRenderer">
            <summary>
            A SeriesRenderer that draws series as a cardinal spline.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.LineRenderer">
            <summary>
            A SeriesRenderer that draws series as polylines.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.LineRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the LineRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as polylines.</param>
        </member>
        <member name="M:MindFusion.Charting.LineRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.CurveRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the CurveRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as a cardinal spline.</param>
        </member>
        <member name="M:MindFusion.Charting.CurveRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            LineRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="T:MindFusion.Charting.Components.GridColumn">
            <summary>
            Represents a column in a GridPanel.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.GridColumn.MeasuredSize">
            <summary>
            Returns the column's measured width.
            </summary>
            <returns>A double value representing the column's width.</returns>
        </member>
        <member name="M:MindFusion.Charting.Components.GridColumn.SetPos(System.Double)">
            <summary>
            Sets the column's position.
            </summary>
            <param name="value">X coordinate of the column.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.GridColumn.RelativeSize">
            <summary>
            Gets whether the column should be sized relatively to other columns in the grid panel.
            </summary>
            <returns>true to apply relative size to this column, or false otherwise.</returns>
        </member>
        <member name="P:MindFusion.Charting.Components.GridColumn.LengthType">
            <summary>
            Gets or sets the column's sizing mode.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.GridColumn.Width">
            <summary>
            Gets or sets fixed width for this column.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.ZoomController">
            <summary>
            Represents a controller that zooms into plot's data range.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.ZoomController.#ctor(MindFusion.Charting.RenderContext,System.Boolean)">
            <summary>
            Initializes a new instance of the ZoomController class.
            </summary>
            <param name="renderContext">A RenderContext instance.</param>
            <param name="vertical">
            true to implement interaction along the Y axis, or false for the X axis.
            </param>
        </member>
        <member name="M:MindFusion.Charting.ZoomController.OnMouseDown(System.Double,System.Double)">
            <summary>
            Plot2DController.OnMouseDown override. Called when the user presses a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.ZoomController.OnMouseMove(System.Double,System.Double)">
            <summary>
            PlotController.OnMouseMove override. Called when the user moves the mouse.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.ZoomController.OnMouseUp(System.Double,System.Double)">
            <summary>
            PlotController.OnMouseUp override. Called when the user releases a mouse button.
            </summary>
            <param name="x">A double value specifying the horizontal position of mouse pointer.</param>
            <param name="y">A double value specifying the vertical position of mouse pointer.</param>
        </member>
        <member name="M:MindFusion.Charting.ZoomController.DrawInteraction(MindFusion.Drawing.IGraphics)">
            <summary>
            PlotController.DrawInteraction override. Draws the currently selected data range
            that that controller will zoom into when the user releases the mouse button.
            </summary>
            <param name="graphics">An IGraphics instance.</param>
        </member>
        <member name="T:MindFusion.Charting.StockPriceSeries">
            <summary>
            Represents a data series defined by a list of StockPrice objects.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.StockPriceSeries.#ctor(System.Collections.Generic.IList{MindFusion.Charting.StockPrice})">
            <summary>
            Initializes a new instance of the StockPriceSeries class.
            </summary>
            <param name="values">A list of StockPrice objects.</param>
        </member>
        <member name="M:MindFusion.Charting.StockPriceSeries.GetValue(System.Int32,System.Int32)">
            <summary>
            Implements Series.GetValue. Returns a coordinate of specified point in this series.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="dimension">An integer value specifying the dimension whose coordinate to return.</param>
            <returns>A double-precision number representing the value of a data item in the series.</returns>
        </member>
        <member name="M:MindFusion.Charting.StockPriceSeries.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            Implements Series.GetLabel. Returns DateTime value at specified index as an XAxisLabel.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="M:MindFusion.Charting.StockPriceSeries.IsEmphasized(System.Int32)">
            <summary>
            Implements Series.IsEmphasized. StockPriceSeries always returns false.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <returns>true to emphasize the specified data item, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.StockPriceSeries.IsSorted(System.Int32)">
            <summary>
            Implements Series.IsSorted. StockPriceSeries always returns false.
            </summary>
            <param name="dimension">An integer value identifying the dimension.</param>
            <returns>true if the values are sorted in specified dimension, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.StockPriceSeries.OnDataChanged">
            <summary>
            Raises the DataChanged event.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPriceSeries.Size">
            <summary>
            Implements Series.Size. Returns the number of elements in Values list.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPriceSeries.Dimensions">
            <summary>
            Implements Series.Dimensions. Returns 5.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPriceSeries.SupportedLabels">
            <summary>
            Implements Series.SupportedLabels. Returns InnerLabel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPriceSeries.Values">
            <summary>
            Gets or sets the series' points.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPriceSeries.Title">
            <summary>
            Implements Series.Title. Gets or sets the title of this series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPriceSeries.DateTimeFormat">
            <summary>
            Gets or sets a value indicating how to format DateTime values as labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPriceSeries.CustomDateTimeFormat">
            <summary>
            Gets or sets a custom format string for DateTime labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPriceSeries.LabelPrefix">
            <summary>
            Gets or sets a prefix added in front of formatted DateTime labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPriceSeries.LabelSuffix">
            <summary>
            Gets or sets a suffix appended to formatted DateTime labels.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.StockPriceSeries.DataChanged">
            <summary>
            Implements Series.DataChanged. Raised when the values in this series change.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.StockPrice">
            <summary>
            Represents a data object, containing open, close, low and high values for a certain date.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.StockPrice.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the StockPrice class.
            </summary>
            <param name="open">The open value.</param>
            <param name="close">The close value.</param>
            <param name="low">The low value.</param>
            <param name="high">The high value.</param>
        </member>
        <member name="M:MindFusion.Charting.StockPrice.#ctor(System.Double,System.Double,System.Double,System.Double,System.DateTime)">
            <summary>
            Initializes a new instance of the StockPrice class.
            </summary>
            <param name="open">The open value.</param>
            <param name="close">The close value.</param>
            <param name="low">The low value.</param>
            <param name="high">The high value.</param>
            <param name="date">The corresponding date.</param>
        </member>
        <member name="P:MindFusion.Charting.StockPrice.Open">
            <summary>
            Gets or sets the open value.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPrice.Close">
            <summary>
            Gets or sets the close value.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPrice.Low">
            <summary>
            Gets or sets the low value.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPrice.High">
            <summary>
            Gets or sets the high value.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.StockPrice.Date">
            <summary>
            Gets or sets the date.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.RadarAxisOptions">
            <summary>
            Provides properties for customizing axis rendering in radar charts.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.RadarAxisOptions.#ctor(MindFusion.Charting.Axis)">
            <summary>
            Initializes a new instance of the RadarAxisOptions class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.RadarAxisOptions.EffectiveAxis(MindFusion.Charting.RenderContext)">
            <summary>
            AxisRenderer.EffectiveAxis override.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.RadarAxisOptions.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            AxisRenderer.Measure override.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.RadarAxisOptions.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            AxisRenderer.Draw override.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.LengthType">
            <summary>
            Indicates how GridPanel determines dimensions of its rows and columns.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.LengthType.Auto">
            <summary>
            The row or column is auto-sized to fit its child components.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.LengthType.Relative">
            <summary>
            The size of relative elements is calculated from available space in the GridPanel
            proportionally to the number of other relative elements.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.LayoutAlignment">
            <summary>
            Indicates how child components are aligned within the layout rectangle
            allocated to them by their parent component.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.LayoutAlignment.Near">
            <summary>
            Align the child component to the left or top side.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.LayoutAlignment.Center">
            <summary>
            Center the child component.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.LayoutAlignment.Far">
            <summary>
            Align the child component to the right or bottom side.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.LayoutAlignment.Stretch">
            <summary>
            Stretch the child component.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.BarStackRenderer3D">
            <summary>
            A SeriesRenderer that draws stacked 3D bars in its containing plot.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.BarStackRenderer">
            <summary>
            A SeriesRenderer that draws stacked bars in its containing plot.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.BarStackRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the BarStackRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as stacked bars.</param>
        </member>
        <member name="M:MindFusion.Charting.BarStackRenderer.EnumVisibleStackBars(MindFusion.Charting.RenderContext,MindFusion.Charting.BarStackRenderer.ProcessStackBars)">
            <summary>
            Enumerates the bars visible in current data range.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessStackBars callback.</param>
        </member>
        <member name="M:MindFusion.Charting.BarStackRenderer.MeasureDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            StackRenderer.MeasureDataRange override. Measures the data range of
            rendered series and assigns it to the associated Axis objects if
            their MinValue and MaxValue are not set.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.BarStackRenderer.AdjustDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.AdjustDataRange override. Adjusts the data range of associated
            Axis objects after initial measure pass.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.BarStackRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.BarStackRenderer.HitTest(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            StackRenderer.HitTest override. Hit-tests the bar representations of data items.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a bar.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.BarStackRenderer.NearestElement(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            StackRenderer.NearestElement override. Returns the data item closest to specified point.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a bar.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.BarStackRenderer.DrawHighlight(MindFusion.Charting.RenderContext,MindFusion.Charting.HitResult)">
            <summary>
            Renderer2D.DrawHighlight override. Draws highlighted bar in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="hitResult">A HitResult instance identifying highlighted data item.</param>
        </member>
        <member name="P:MindFusion.Charting.BarStackRenderer.HorizontalBars">
            <summary>
            Gets or sets a value identifying whether bars should be horizontal.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarStackRenderer.BarSpacingRatio">
            <summary>
            Gets or sets the ratio of empty space between adjacent bar groups to space occupied by bars.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarStackRenderer.StackOuterLabels">
            <summary>
            Gets or sets whether outer labels are displayed stacked on top of stacked bars,
            instead of showing them on the bar sides.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarStackRenderer.OuterLabelRotation">
            <summary>
            Gets or sets the rotation angle of outer labels. If not specified, labels
            are rotated at predefiend angles depending on bars' orientation and layout.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarStackRenderer.InnerLabelRotation">
            <summary>
            Gets or sets the rotation angle of inner labels. If not specified, labels
            are rotated at predefiend angles depending on bars' orientation and layout.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.BarStackRenderer.ProcessStackBars">
            <summary>
            Defines the signature of delegates called to process stacked bars.
            </summary>
            <param name="seriesIndex">An integer index of series in Series list.</param>
            <param name="dataIndex">An integer index of data item in specified series.</param>
            <param name="bounds">A RectangleF representing the boundaries of current bar.</param>
            <param name="oppositeDirection">A flag specifying if bar is on negative side of Origin.</param>
        </member>
        <member name="M:MindFusion.Charting.BarStackRenderer3D.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the BarStackRenderer3D class.
            </summary>
            <param name="series">A list of Series that should be rendered as stacked bars.</param>
        </member>
        <member name="M:MindFusion.Charting.BarStackRenderer3D.BuildModels(MindFusion.Charting.ThreeD.Scene3D,MindFusion.Charting.RenderContext)">
            <summary>
            Implements Renderer3D.BuildModels. Adds 3D bar models for the series data to specified scene.
            </summary>
            <param name="scene">A Scene3D instance.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="T:MindFusion.Charting.Margins">
            <summary>
            Describes rectangular margins.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Margins.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Margins structure.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Margins.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Margins structure.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Margins.Left">
            <summary>
            Gets or sets the width of the left side of the frame.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Margins.Top">
            <summary>
            Gets or sets the width of the top side of the frame.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Margins.Right">
            <summary>
            Gets or sets the width of the right side of the frame.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Margins.Bottom">
            <summary>
            Gets or sets the width of the bottom side of the frame.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Margins.Width">
            <summary>
            Returns the sum of Left and Right margins.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Margins.Height">
            <summary>
            Returns the sum of Top and Bottom margins.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.RadarPlot">
            <summary>
            A plot containing radar-chart graphics.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.RadarPlot.#ctor">
            <summary>
            Initializes a new instance of the RadarPlot class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.RadarPlot.GetEffectiveAxis(System.Int32)">
            <summary>
            Gets the Axis representing the range for specified data variable index.
            </summary>
            <param name="index">An integer index of data items in series.</param>
            <returns>The associated Axis.</returns>
        </member>
        <member name="M:MindFusion.Charting.RadarPlot.DrawGrid(MindFusion.Charting.RenderContext)">
            <summary>
            Plot.DrawGrid override. Draws spiderweb or radial grid.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.RadarPlot.StartMeasureData(MindFusion.Charting.RenderContext)">
            <summary>
            Plot.StartMeasureData override. Called in the beginning of data measurement pass.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="P:MindFusion.Charting.RadarPlot.Axes">
            <summary>
            Gets the list of Axis objects representing ranges
            of variables represented in the radar chart.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RadarPlot.DefaultAxis">
            <summary>
            Gets a default Axis object used when data item index does not
            have corresponding element in the Axes collection.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RadarPlot.AxisOptions">
            <summary>
            Gets a RadarAxisOptions object providing properties for customizing
            axis rendering in radar charts.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RadarPlot.GridType">
            <summary>
            Gets or sets the type of grid to draw in this plot.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RadarPlot.GridDivisions">
            <summary>
            Gets the number of concentric shapes to draw in the grid.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RadarPlot.UniformScale">
            <summary>
            Gets or sets a value indicating whether all axes should display same data range.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RadarPlot.ShowCoordinates">
            <summary>
            Gets or sets a value indicating whether the grid should display axis coordinates.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RadarPlot.GridColor1">
            <summary>
            Gets or sets the main color of the grid.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.RadarPlot.GridColor2">
            <summary>
            Gets or sets the alternating color of the grid.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.PieRadarRenderer">
            <summary>
            A SeriesRenderer that draws pie-radars, where data items are represented
            by circular sectors of equal central angles, and the sector corresponding
            to a data item has radius proportional to its value.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.PieRadarRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the PieRadarRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered by this object.</param>
        </member>
        <member name="M:MindFusion.Charting.PieRadarRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            RadarRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.PieRadarRenderer.EnumSectors(MindFusion.Charting.RenderContext,MindFusion.Charting.PieRadarRenderer.ProcessSectors)">
            <summary>
            Enumerates the pie-radar sectors corresponding to each series.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessSectors callback.</param>
        </member>
        <member name="M:MindFusion.Charting.PieRadarRenderer.DrawHighlight(MindFusion.Charting.RenderContext,MindFusion.Charting.HitResult)">
            <summary>
            RadarRenderer.DrawHighlight override. Draws highlighted data item in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="hitResult">A HitResult instance identifying highlighted data item.</param>
        </member>
        <member name="P:MindFusion.Charting.PieRadarRenderer.AlignToAxis">
            <summary>
            Gets or sets a value indicating whether sectors should be aligned to
            axes in the radar grid or centered around them.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.PieRadarRenderer.ProcessSectors">
            <summary>
            Defines the signature of delegates called to process sectors generated for a series.
            </summary>
            <param name="seriesIndex">An integer index of series in Series list.</param>
            <param name="points">
            A list of PointF values containing the plot coordinates corresponding to data items.
            </param>
            <param name="paths">
            A list of GraphicsPath objects representing pie-radar sectors.
            </param>
        </member>
        <member name="T:MindFusion.Charting.MixedSeriesStyle">
            <summary>
            Implements SeriesStyle using mixed per-element and uniform values for attributes.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.MixedSeriesStyle.#ctor">
            <summary>
            Initializes a new instance of the MixedSeriesStyle class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.MixedSeriesStyle.#ctor(MindFusion.Drawing.Brush,MindFusion.Drawing.Brush,System.Double,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Initializes a new instance of the MixedSeriesStyle class.
            </summary>
            <param name="fill">A Brush used to fill all series elements.</param>
            <param name="stroke">A Brush used to stroke all series elements.</param>
            <param name="strokeThickness">Uniform thickness of series elements' strokes.</param>
            <param name="strokeDashStyle">Uniform dash style of series elements' strokes.</param>
        </member>
        <member name="M:MindFusion.Charting.MixedSeriesStyle.Fill(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.Stroke. Returns a Brush instance from
            Fills, CommonFills or UniformFill properties.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.MixedSeriesStyle.Stroke(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.Stroke. Returns a Brush instance from
            Strokes, CommonStrokes or UniformStroke properties.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.MixedSeriesStyle.StrokeThickness(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.StrokeThickness. Returns a value from
            StrokeThicknesses, CommonStrokeThicknesses or UniformStrokeThickness properties.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A nullable double value specifying stroke thickness.</returns>
        </member>
        <member name="M:MindFusion.Charting.MixedSeriesStyle.StrokeDashStyle(System.Int32,System.Int32)">
            <summary>
            Implements SeriesStyle.StrokeDashStyle. Returns a value from
            StrokeDashStyles, CommonStrokeDashStyles or UniformStrokeDashStyle properties.
            </summary>
            <param name="seriesIndex">An integer index of a Series.</param>
            <param name="dataIndex">An integer index of a data item in specified series.</param>
            <returns>A nullable DashStyle value specifying stroke dash style.</returns>
        </member>
        <member name="P:MindFusion.Charting.MixedSeriesStyle.UniformFill">
            <summary>
            Gets or sets a Brush used to fill all elements of all series uniformly.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.MixedSeriesStyle.UniformStroke">
            <summary>
            Gets or sets a Brush used to stroke all elements of all series uniformly.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.MixedSeriesStyle.UniformStrokeThickness">
            <summary>
            Gets or sets uniform stroke thickness for all elements of all series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.MixedSeriesStyle.UniformStrokeDashStyle">
            <summary>
            Gets or sets uniform stroke dash style for all elements of all series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.MixedSeriesStyle.CommonFills">
            <summary>
            Gets or sets a list of brushes, each Brush used to fill all elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.MixedSeriesStyle.CommonStrokes">
            <summary>
            Gets or sets a list of brushes, each Brush used to stroke all elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.MixedSeriesStyle.CommonStrokeThicknesses">
            <summary>
            Gets or sets a list of stroke thicknesses, each thickness applied to all elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.MixedSeriesStyle.CommonStrokeDashStyles">
            <summary>
            Gets or sets a list of dash styles, each style applied to all elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.MixedSeriesStyle.Fills">
            <summary>
            Gets or sets a list of Brush lists, each list used to draw a different series,
            and each Brush used to fill individual elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.MixedSeriesStyle.Strokes">
            <summary>
            Gets or sets a list of Brush lists, each list used to stroke a different series,
            and each Brush used to stroke individual elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.MixedSeriesStyle.StrokeThicknesses">
            <summary>
            Gets or sets a list of double lists, each list used to stroke a different series,
            and each double value specifying thickness of individual elements of a series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.MixedSeriesStyle.StrokeDashStyles">
            <summary>
            Gets or sets a list of DashStyle lists, each list used to stroke a different series,
            and each DashStyle value specifying style of individual elements of a series.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.LegendRenderer">
            <summary>
            A component that renders chart legend.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.LegendRenderer.#ctor">
            <summary>
            Initializes a new instance of the LegendRenderer class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.LegendRenderer.CreateController(MindFusion.Charting.RenderContext)">
            <summary>
            Component.CreateController override. Returns a ComponentController
            used to interact with this component.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>Instance of the LegendController class.</returns>
        </member>
        <member name="M:MindFusion.Charting.LegendRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Component.Draw override. Draws legend elements in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.LegendRenderer.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Measure override. Measures the desired size of this component.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.LegendRenderer.EffectiveTitleFont(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Font that should be used to draw the legend's Title.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A System.Drawing.Font instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.LegendRenderer.EffectiveTitleBrush(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Brush that should be used to draw the legend's Title.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A System.Drawing.Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.LegendRenderer.EffectiveFill(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Brush that should be used to fill the legend background.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.LegendRenderer.EffectiveBorderPen(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Pen that should be used to draw the legend borders.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A Pen instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.LegendRenderer.EffectiveBorderStroke(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the Brush that should be used to stroke the legend borders.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.LegendRenderer.EffectiveBorderStrokeThickness(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the thickness of border strokes.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A double value.</returns>
        </member>
        <member name="M:MindFusion.Charting.LegendRenderer.EffectiveStrokeDashStyle(MindFusion.Charting.RenderContext)">
            <summary>
            Gets the dash style of border strokes.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>A member of the DashStyle enumeration.</returns>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.Content">
            <summary>
            Gets or sets a list of SeriesRenderer objects whose Series
            should be displayed in this legend.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.Title">
            <summary>
            Gets or sets the legend's title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.TitleBrush">
            <summary>
            Gets or sets the Brush that should be used to draw the legend's Title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.TitleFontName">
            <summary>
            Gets or sets the name of font that should be used to draw the legend's Title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.TitleFontSize">
            <summary>
            Gets or sets the size of font that should be used to draw the legend's Title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.TitleFontStyle">
            <summary>
            Gets or sets the style of font that should be used to draw the legend's Title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.ShowTitle">
            <summary>
            Gets or sets a value indicating whether to display the legend title.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.Padding">
            <summary>
            Gets or sets the padding space between content and borders of this legend.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.Spacing">
            <summary>
            Gets or sets the distance between adjacent entries in the legend.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.AllowMove">
            <summary>
            Gets or sets a value indicating whether users are allowed to move this legend.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.Background">
            <summary>
            Gets or sets the Brush that should be used to fill the background of this legend.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.BorderStroke">
            <summary>
            Gets or sets the Brush that should be used to stroke the borders of this legend.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.BorderStrokeThickness">
            <summary>
            Gets or sets the stroke thickness of legend borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.BorderStrokeDashStyle">
            <summary>
            Gets or sets the stroke dash style of legend borders.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.MaxItemsPerColumn">
            <summary>
            Gets or sets the maximum number ot items per display column.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.ShowSeriesElements">
            <summary>
            Gets or sets a value, indicatating whether this legend will display individual 
            series element labels instead of the series titles.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.LegendRenderer.ElementLabelKind">
            <summary>
            Gets or sets the type of label to show for series elements. 
            This property is used only when ShowSeriesElements is set to true.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.ImageComponent">
            <summary>
            Represents a component that draws a bitmap image.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.ImageComponent.#ctor">
            <summary>
            Initializes a new instance of the ImageComponent class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.ImageComponent.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Measure override. Measures the desired size of this component.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.ImageComponent.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Component.Draw override. Draws associated Image in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="P:MindFusion.Charting.Components.ImageComponent.Image">
            <summary>
            Gets or sets the image contained by this component.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.ImageComponent.Location">
            <summary>
            Gets or sets Image by its file location.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.ImageComponent.AutoSize">
            <summary>
            Gets or sets a value indicating whether the component
            should auto-size to match the dimensions of its Image.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Components.ImageComponent.ImageAlign">
            <summary>
            Gets or sets the image alignment relative to the component.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.CandlestickRenderer">
            <summary>
            A SeriesRenderer that draws candlesticks in its containing plot.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.CandlestickRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the CandlestickRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered by this object.</param>
        </member>
        <member name="M:MindFusion.Charting.CandlestickRenderer.EnumVisibleCandlesticks(MindFusion.Charting.RenderContext,MindFusion.Charting.CandlestickRenderer.ProcessCandlesticks)">
            <summary>
            Enumerates the candlesticks visible in current data range.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="process">A ProcessCandlesticks callback.</param>
        </member>
        <member name="M:MindFusion.Charting.CandlestickRenderer.MeasureDataRange(MindFusion.Charting.RenderContext)">
            <summary>
            Renderer2D.MeasureDataRange override. Measures the data range of
            rendered series and assigns it to the associated Axis objects if
            their MinValue and MaxValue are not set.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.CandlestickRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.CandlestickRenderer.HitTest(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Renderer2D.HitTest override. Hit-tests the bar representations of data items.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a candlestick.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.CandlestickRenderer.NearestElement(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Renderer2D.NearestElement override. Returns the data item closest to specified point.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a candlestick.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.CandlestickRenderer.DrawHighlight(MindFusion.Charting.RenderContext,MindFusion.Charting.HitResult)">
            <summary>
            Renderer2D.DrawHighlight override. Draws highlighted candlestick in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="hitResult">A HitResult instance identifying highlighted data item.</param>
        </member>
        <member name="M:MindFusion.Charting.CandlestickRenderer.EffectiveFill(System.Int32,System.Int32,MindFusion.Charting.RenderContext)">
            <summary>
            Gets the brush that should be used to fill the representation of specified data item.
            </summary>
            <param name="seriesIndex">An integer index of a Series within the list of series rendered by this SeriesRenderer.</param>
            <param name="dataIndex">An integer index of the data item in specified series.</param>
            <param name="context">A RenderContext instance.</param>
            <returns>A Brush instance.</returns>
        </member>
        <member name="P:MindFusion.Charting.CandlestickRenderer.OpenDimension">
            <summary>
            Gets or sets the index of the dimension, containing open values.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.CandlestickRenderer.CloseDimension">
            <summary>
            Gets or sets the index of the dimension, containing close values.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.CandlestickRenderer.LowDimension">
            <summary>
            Gets or sets the index of the dimension, containing low values.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.CandlestickRenderer.HighDimension">
            <summary>
            Gets or sets the index of the dimension, containing high values.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.CandlestickRenderer.CandlestickWidth">
            <summary>
            Gets or sets the width of the candlesticks.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.CandlestickRenderer.ProcessCandlesticks">
            <summary>
            Defines the signature of delegates called to process candlesticks.
            </summary>
            <param name="seriesIndex">An integer index of series in Series list.</param>
            <param name="dataIndex">An integer index of data item in specified series.</param>
            <param name="points">An array of four points containing wick ends' coordinates.</param>
            <param name="bounds">A RectangleF representing the boundaries of current candlestick.</param>
        </member>
        <member name="T:MindFusion.Charting.BarSeries">
            <summary>
            Represents one-dimensional series defined by e list of data values
            and several lists of labels.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.BarSeries.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the BarSeries class.
            </summary>
            <param name="values">A list of data values.</param>
            <param name="innerLabels">A list of inner labels.</param>
            <param name="topLabels">A list of top labels.</param>
            <param name="xAxisLabels">A list of X axis labels.</param>
        </member>
        <member name="M:MindFusion.Charting.BarSeries.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the BarSeries class.
            </summary>
            <param name="values">A list of data values.</param>
            <param name="innerLabels">A list of inner labels.</param>
            <param name="topLabels">A list of top labels.</param>
        </member>
        <member name="M:MindFusion.Charting.BarSeries.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            SimpleSeries.GetLabel override. Returns an element of a labels list.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="P:MindFusion.Charting.BarSeries.SupportedLabels">
            <summary>
            SimpleSeries.SupportedLabels override. Returns a combination of
            InnerLabel, OuterLabel and XAxisLabel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarSeries.InnerLabels">
            <summary>
            Gets or sets the inner labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarSeries.TopLabels">
            <summary>
            Gets or sets the top labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.BarSeries.XAxisLabels">
            <summary>
            Gets or sets the X axis labels.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.YAxisRenderer">
            <summary>
            A Component that renders vertical Axis ranges.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.YAxisRenderer.#ctor(MindFusion.Charting.Axis)">
            <summary>
            Initializes a new instance of the YAxisRenderer class.
            </summary>
            <param name="axis">The Axis that will be drawn by this object.</param>
        </member>
        <member name="M:MindFusion.Charting.YAxisRenderer.#ctor(MindFusion.Charting.Axis,MindFusion.Charting.Axis)">
            <summary>
            Initializes a new instance of the YAxisRenderer class.
            </summary>
            <param name="axis">The Axis that will be drawn by this object.</param>
            <param name="xAxis">The Axis used to check data item visibility.</param>
        </member>
        <member name="M:MindFusion.Charting.YAxisRenderer.EffectiveAxis(MindFusion.Charting.RenderContext)">
            <summary>
            AxisRenderer.EffectiveAxis override. Gets the effective vertical Axis in current context,
            getting one from Plot2D or chart control if there's no local Axis associated with this renderer.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>An Axis instance.</returns>
        </member>
        <member name="M:MindFusion.Charting.YAxisRenderer.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Measure override. Measures the desired size of this component.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.YAxisRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Component.Draw override. Draws this component in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="P:MindFusion.Charting.YAxisRenderer.PlotLeftSide">
            <summary>
            Gets or sets whether this YAxisRenderer is shown at the left side of a plot.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.YAxisRenderer.LabelAlignment">
            <summary>
            Gets or sets the horizontal alignment of axis labels.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Series2D">
            <summary>
            Represents a data series defined by two lists of values containing
            respectively X and Y coordinates.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Series2D.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the Series2D class.
            </summary>
            <param name="xValues">A list of X coordinates.</param>
            <param name="yValues">A list of Y coordinates.</param>
            <param name="labels">A list of labels.</param>
        </member>
        <member name="M:MindFusion.Charting.Series2D.GetValue(System.Int32,System.Int32)">
            <summary>
            Implements Series.GetValue. Returns a value for the specified data item in this series.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="dimension">An integer value specifying the dimension whose coordinate to return.</param>
            <returns>A double-precision number representing the value of a data item in the series.</returns>
        </member>
        <member name="M:MindFusion.Charting.Series2D.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            Implements Series.GetLabel. Returns an element of the Labels list.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="M:MindFusion.Charting.Series2D.IsEmphasized(System.Int32)">
            <summary>
            Implements Series.IsEmphasized. Series2D always returns false.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <returns>true to emphasize the specified data item, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Series2D.IsSorted(System.Int32)">
            <summary>
            Implements Series.IsSorted. Series2D always returns false.
            </summary>
            <param name="dimension">An integer value identifying the dimension.</param>
            <returns>true if the values are sorted in specified dimension, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Series2D.OnDataChanged">
            <summary>
            Raises the DataChanged event.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series2D.Size">
            <summary>
            Implements Series.Size. Returns the number of elements in XData list.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series2D.Dimensions">
            <summary>
            Implements Series.Dimensions. Returns 2.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series2D.SupportedLabels">
            <summary>
            Implements Series.SupportedLabels. Gets or sets the kind of labels
            reported as supported by this series.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series2D.XData">
            <summary>
            Gets or sets the X coordinates of data items.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series2D.YData">
            <summary>
            Gets or sets the Y coordinates of data items.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series2D.Labels">
            <summary>
            Gets or sets the data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series2D.Title">
            <summary>
            Implements Series.Title. Gets or sets the title of this series.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.Series2D.DataChanged">
            <summary>
            Implements Series.DataChanged. Raised when the values in this series change.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Gauges.OvalGaugeRenderer">
            <summary>
            A Component that renders oval gauges in the dashboard.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Gauges.OvalGaugeRenderer.#ctor">
            <summary>
            Initializes a new instance of the OvalGaugeRenderer class.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Gauges.OvalGaugeRenderer.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Measure override. Measures the desired size of this component.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.OvalGaugeRenderer.Arrange(System.Double,System.Double,System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Arrange override. Sets the location and size of this component relatively to its parent.
            </summary>
            <param name="x">A double value specifying horizontal position.</param>
            <param name="y">A double value specifying vertical position.</param>
            <param name="w">A double value specifying the component's width.</param>
            <param name="h">A double value specifying the component's height.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.OvalGaugeRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            Component.Draw override. Draws this component in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Gauges.OvalGaugeRenderer.CreateController(MindFusion.Charting.RenderContext)">
            <summary>
            Component.CreateController override. Returns a ComponentController
            used to interact with this component.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <returns>An instance of the OvalGaugeController class.</returns>
        </member>
        <member name="P:MindFusion.Charting.Gauges.OvalGaugeRenderer.Gauge">
            <summary>
            Gets or sets the OvalGauge represented by this renderer.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.BubbleRenderer">
            <summary>
            A SeriesRenderer that draws bubbles representing data items in its containing plot.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.BubbleRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the BubbleRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered as bubbles.</param>
        </member>
        <member name="M:MindFusion.Charting.BubbleRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws bubbles representing data items in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.BubbleRenderer.HitTest(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Renderer2D.HitTest override. Hit-tests the bubble representations of data items.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a bubble.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.BubbleRenderer.NearestElement(MindFusion.Charting.RenderContext,MindFusion.PointD)">
            <summary>
            Renderer2D.NearestElement override. Returns the data item closest to specified point.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="location">A PointD specifying where to look for a bubble.</param>
            <returns>A HitResult instance identifying the found data item.</returns>
        </member>
        <member name="M:MindFusion.Charting.BubbleRenderer.DrawHighlight(MindFusion.Charting.RenderContext,MindFusion.Charting.HitResult)">
            <summary>
            Renderer2D.DrawHighlight override. Draws highlighted bubble in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
            <param name="hitResult">A HitResult instance identifying highlighted data item.</param>
        </member>
        <member name="P:MindFusion.Charting.BubbleRenderer.LabelAlignment">
            <summary>
            Gets or sets the label alignment.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.BubbleLabelAlignment">
            <summary>
            Specifies the alignment of a label relative to its associated bubble.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.BubbleLabelAlignment.Center">
            <summary>
            Indicates that the label is centered inside the bubble.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.BubbleLabelAlignment.Above">
            <summary>
            Indicates that the label is positioned above the bubble.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.BubbleLabelAlignment.Below">
            <summary>
            Indicates that the label is positioned below the bubble.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.BubbleLabelAlignment.Left">
            <summary>
            Indicates that the label is positioned to the left of the bubble.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.BubbleLabelAlignment.Right">
            <summary>
            Indicates that the label is positioned to the right of the bubble.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.StepRenderer">
            <summary>
            A SeriesRenderer that draws series as steps between data points.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.StepRenderer.#ctor(System.Collections.ObjectModel.ObservableCollection{MindFusion.Charting.Series})">
            <summary>
            Initializes a new instance of the StepRenderer class.
            </summary>
            <param name="series">A list of Series that should be rendered by this object.</param>
        </member>
        <member name="M:MindFusion.Charting.StepRenderer.Draw(MindFusion.Charting.RenderContext)">
            <summary>
            SeriesRenderer.Draw override. Draws the series data in specified RenderContext.
            </summary>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="T:MindFusion.Charting.Series3D">
            <summary>
            Represents a data series defined by three lists of values containing
            respectively X, Y and Z coordinates.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Series3D.#ctor(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the Series3D class.
            </summary>
            <param name="xValues">A list of X coordinates.</param>
            <param name="yValues">A list of Y coordinates.</param>
            <param name="zValues">A list of Z coordinates.</param>
            <param name="labels">A list of labels.</param>
        </member>
        <member name="M:MindFusion.Charting.Series3D.GetValue(System.Int32,System.Int32)">
            <summary>
            Implements Series.GetValue. Returns a value for the specified data item in this series.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="dimension">An integer value specifying the dimension whose coordinate to return.</param>
            <returns>A double-precision number representing the value of a data item in the series.</returns>
        </member>
        <member name="M:MindFusion.Charting.Series3D.GetLabel(System.Int32,MindFusion.Charting.LabelKinds)">
            <summary>
            Implements Series.GetLabel. Returns an element of the Labels list.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <param name="kind">A member of the LabelKinds enumeration.</param>
            <returns>A string containing the item's label.</returns>
        </member>
        <member name="M:MindFusion.Charting.Series3D.IsEmphasized(System.Int32)">
            <summary>
            Implements Series.IsEmphasized. Series3D always returns false.
            </summary>
            <param name="index">An integer value specifying the index of a data item.</param>
            <returns>true to emphasize the specified data item, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Series3D.IsSorted(System.Int32)">
            <summary>
            Implements Series.IsSorted. Series3D always returns false.
            </summary>
            <param name="dimension">An integer value identifying the dimension.</param>
            <returns>true if the values are sorted in specified dimension, or false otherwise.</returns>
        </member>
        <member name="M:MindFusion.Charting.Series3D.OnDataChanged">
            <summary>
            Raises the DataChanged event.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series3D.Size">
            <summary>
            Implements Series.Size. Returns the number of elements in XData list.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series3D.Dimensions">
            <summary>
            Implements Series.Dimensions. Returns 3.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series3D.SupportedLabels">
            <summary>
            Implements Series.SupportedLabels. Returns InnerLabel.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series3D.XData">
            <summary>
            Gets or sets the X coordinates of data items.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series3D.YData">
            <summary>
            Gets or sets the Y coordinates of data items.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series3D.ZData">
            <summary>
            Gets or sets the Z coordinates of data items.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series3D.Labels">
            <summary>
            Gets or sets the data labels.
            </summary>
        </member>
        <member name="P:MindFusion.Charting.Series3D.Title">
            <summary>
            Implements Series.Title. Gets or sets the title of this series.
            </summary>
        </member>
        <member name="E:MindFusion.Charting.Series3D.DataChanged">
            <summary>
            Implements Series.DataChanged. Raised when the values in this series change.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.Visibility">
            <summary>
            Identifies visibility of components.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.Visibility.Hidden">
            <summary>
            The component is hidden but participates in layout measurements.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.Visibility.Collapsed">
            <summary>
            The component is hidden and does not participate in layout measurements.
            </summary>
        </member>
        <member name="F:MindFusion.Charting.Components.Visibility.Visible">
            <summary>
            The component is visible.
            </summary>
        </member>
        <member name="T:MindFusion.Charting.Components.StackPanel">
            <summary>
            Represents a layout panel that arranges its child components in a stack.
            </summary>
        </member>
        <member name="M:MindFusion.Charting.Components.StackPanel.Measure(System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Panel.Measure override. Measures the desired size of this panel and its child components.
            </summary>
            <param name="maxWidth">The maximum width provided by parent component.</param>
            <param name="maxHeight">The maximum height provided by parent component.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="M:MindFusion.Charting.Components.StackPanel.Arrange(System.Double,System.Double,System.Double,System.Double,MindFusion.Charting.RenderContext)">
            <summary>
            Component.Arrange override. Sets the location and size
            of this panel and arranges its child components.
            </summary>
            <param name="x">A double value specifying horizontal position.</param>
            <param name="y">A double value specifying vertical position.</param>
            <param name="w">A double value specifying the component's width.</param>
            <param name="h">A double value specifying the component's height.</param>
            <param name="context">A RenderContext instance.</param>
        </member>
        <member name="P:MindFusion.Charting.Components.StackPanel.Orientation">
            <summary>
            Gets or sets the stack orientation.
            </summary>
        </member>
    </members>
</doc>
